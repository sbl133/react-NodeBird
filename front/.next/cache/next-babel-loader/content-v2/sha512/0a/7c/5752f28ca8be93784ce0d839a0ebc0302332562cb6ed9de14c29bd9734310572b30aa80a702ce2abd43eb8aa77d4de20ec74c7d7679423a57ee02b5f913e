{"ast":null,"code":"import axios from 'axios';\nimport { all, delay, fork, put, takeLatest, throttle } from 'redux-saga/effects';\nimport shortid from 'shortid'; // all: 안에있는effects동시실행 fork: 비동기함수호출 call: 동기함수호출 put: dispatch\n// take: 기다린다(동기) takeEvery: 기다린다.(비동기)\n// throttle 인자밀리초안에 한번만 take\n\nimport { ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE, REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS, REMOVE_POST_FAILURE, LOAD_POSTS_REQUEST, LOAD_POSTS_SUCCESS, LOAD_POSTS_FAILURE, generateDummyPost } from '../reducers/post';\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from '../reducers/user';\n\nfunction loadPostAPI(data) {\n  return axios.get('/api/post', data);\n}\n\nfunction* loadPost(action) {\n  try {\n    yield delay(1000);\n    yield put({\n      type: LOAD_POSTS_SUCCESS,\n      data: generateDummyPost(10)\n    });\n  } catch (err) {\n    yield put({\n      type: LOAD_POSTS_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction addPostAPI(data) {\n  return axios.post('/api/post', data);\n}\n\nfunction* addPost(action) {\n  try {\n    yield delay(1000);\n    const id = shortid.generate();\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: {\n        id,\n        content: action.data\n      }\n    });\n    yield put({\n      type: ADD_POST_TO_ME,\n      data: id\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction removePostAPI(data) {\n  return axios.delete('/api/post', data);\n}\n\nfunction* removePost(action) {\n  try {\n    yield delay(1000);\n    yield put({\n      type: REMOVE_POST_SUCCESS,\n      data: action.data\n    });\n    yield put({\n      type: REMOVE_POST_OF_ME,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: REMOVE_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction addCommentAPI(data) {\n  return axios.post(`/api/post/${data.id}/comment`, data);\n}\n\nfunction* addComment(action) {\n  try {\n    yield delay(1000);\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\nfunction* watchRemovePost() {\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\n}\n\nfunction* watchLoadPost() {\n  yield throttle(LOAD_POSTS_REQUEST, loadPost);\n}\n\nexport default function* postSaga() {\n  yield all([fork(watchAddPost), fork(watchLoadPost), fork(watchAddComment), fork(watchRemovePost)]);\n}","map":{"version":3,"sources":["C:/major/react-NodeBird/prepare/front/sagas/post.js"],"names":["axios","all","delay","fork","put","takeLatest","throttle","shortid","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","LOAD_POSTS_FAILURE","generateDummyPost","ADD_POST_TO_ME","REMOVE_POST_OF_ME","loadPostAPI","data","get","loadPost","action","type","err","response","addPostAPI","post","addPost","id","generate","content","removePostAPI","delete","removePost","addCommentAPI","addComment","watchAddComment","watchAddPost","watchRemovePost","watchLoadPost","postSaga"],"mappings":"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","sourcesContent":["import axios from 'axios';\r\nimport { all, delay, fork, put, takeLatest, throttle } from 'redux-saga/effects';\r\nimport shortid from 'shortid';\r\n// all: 안에있는effects동시실행 fork: 비동기함수호출 call: 동기함수호출 put: dispatch\r\n// take: 기다린다(동기) takeEvery: 기다린다.(비동기)\r\n// throttle 인자밀리초안에 한번만 take\r\nimport {\r\n    ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE,\r\n    ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE,\r\n    REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS, REMOVE_POST_FAILURE,\r\n    LOAD_POSTS_REQUEST, LOAD_POSTS_SUCCESS, LOAD_POSTS_FAILURE, generateDummyPost,\r\n} from '../reducers/post';\r\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from '../reducers/user';\r\n\r\nfunction loadPostAPI(data) {\r\n    return axios.get('/api/post', data);\r\n}\r\nfunction* loadPost(action) {\r\n    try {\r\n        yield delay(1000);\r\n        yield put({\r\n            type: LOAD_POSTS_SUCCESS,\r\n            data: generateDummyPost(10),\r\n        });\r\n    } catch (err) {\r\n        yield put({\r\n            type: LOAD_POSTS_FAILURE,\r\n            data: err.response.data,\r\n        });\r\n    }\r\n}\r\nfunction addPostAPI(data) {\r\n    return axios.post('/api/post', data);\r\n}\r\nfunction* addPost(action) {\r\n    try {\r\n        yield delay(1000);\r\n        const id = shortid.generate();\r\n        yield put({\r\n            type: ADD_POST_SUCCESS,\r\n            data: {\r\n                id,\r\n                content: action.data,\r\n            },\r\n        });\r\n        yield put({\r\n            type: ADD_POST_TO_ME,\r\n            data: id,\r\n        });\r\n    } catch (err) {\r\n        yield put({\r\n            type: ADD_POST_FAILURE,\r\n            data: err.response.data,\r\n        });\r\n    }\r\n}\r\nfunction removePostAPI(data) {\r\n    return axios.delete('/api/post', data);\r\n}\r\nfunction* removePost(action) {\r\n    try {\r\n        yield delay(1000);\r\n        yield put({\r\n            type: REMOVE_POST_SUCCESS,\r\n            data: action.data,\r\n        });\r\n        yield put({\r\n            type: REMOVE_POST_OF_ME,\r\n            data: action.data,\r\n        });\r\n    } catch (err) {\r\n        yield put({\r\n            type: REMOVE_POST_FAILURE,\r\n            data: err.response.data,\r\n        });\r\n    }\r\n}\r\nfunction addCommentAPI(data) {\r\n    return axios.post(`/api/post/${data.id}/comment`, data);\r\n}\r\nfunction* addComment(action) {\r\n    try {\r\n        yield delay(1000);\r\n        yield put({\r\n            type: ADD_COMMENT_SUCCESS,\r\n            data: action.data,\r\n        });\r\n    } catch (err) {\r\n        yield put({\r\n            type: ADD_COMMENT_FAILURE,\r\n            data: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction* watchAddComment() {\r\n    yield takeLatest(ADD_COMMENT_REQUEST, addComment);\r\n}\r\nfunction* watchAddPost() {\r\n    yield takeLatest(ADD_POST_REQUEST, addPost);\r\n}\r\nfunction* watchRemovePost() {\r\n    yield takeLatest(REMOVE_POST_REQUEST, removePost);\r\n}\r\nfunction* watchLoadPost() {\r\n    yield throttle(LOAD_POSTS_REQUEST, loadPost);\r\n}\r\nexport default function* postSaga() {\r\n    yield all([\r\n        fork(watchAddPost),\r\n        fork(watchLoadPost),\r\n        fork(watchAddComment),\r\n        fork(watchRemovePost),\r\n    ]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}