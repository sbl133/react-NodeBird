{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport React, { useEffect, useState, useCallback } from 'react';\nimport Head from 'next/head';\nimport { useSelector } from 'react-redux';\nimport Router from 'next/router';\nimport axios from 'axios';\nimport { END } from 'redux-saga';\nimport useSWR from 'swr';\nimport AppLayout from '../components/AppLayout';\nimport FollowList from '../components/FollowList';\nimport NicknameEditForm from '../components/NicknameEditForm';\nimport { LOAD_MY_INFO_REQUEST } from '../reducers/user';\nimport wrapper from '../store/configureStore';\n\nconst fetcher = url => axios.get(url, {\n  withCredentials: true\n}).then(result => result.data);\n\nconst Profile = () => {\n  const {\n    me\n  } = useSelector(state => state.user);\n  const {\n    0: followersLimit,\n    1: setFollowersLimit\n  } = useState(3);\n  const {\n    0: followingsLimit,\n    1: setFollowingsLimit\n  } = useState(3); // fetcher를 다른걸로 바꾸면 graphql도 쓸 수 있슴\n\n  const {\n    data: followersData,\n    error: followerError\n  } = useSWR(`http://localhost:3065/user/followers?limit=${followersLimit}`, fetcher);\n  const {\n    data: followingsData,\n    error: followingError\n  } = useSWR(`http://localhost:3065/user/followings?limit=${followingsLimit}`, fetcher);\n  useEffect(() => {\n    if (!(me && me.id)) {\n      Router.push('/');\n    }\n  }, [me && me.id]);\n  const loadMoreFollowings = useCallback(() => {\n    setFollowingsLimit(prev => prev + 3);\n  }, []);\n  const loadMoreFollowers = useCallback(() => {\n    setFollowersLimit(prev => prev + 3);\n  }, []);\n\n  if (!me) {\n    return '내 정보 로딩중...';\n  }\n\n  if (followerError || followingError) {\n    console.error(followerError || followingError);\n    return /*#__PURE__*/_jsx(\"div\", {\n      children: \"\\uD314\\uB85C\\uC789/\\uD314\\uB85C\\uC6CC \\uB85C\\uB529 \\uC911 \\uC5D0\\uB7EC\\uAC00 \\uBC1C\\uC0DD\\uD569\\uB2C8\\uB2E4.\"\n    });\n  }\n\n  return /*#__PURE__*/_jsxs(_Fragment, {\n    children: [/*#__PURE__*/_jsx(Head, {\n      children: /*#__PURE__*/_jsx(\"title\", {\n        children: \"\\uB0B4 \\uD504\\uB85C\\uD544 | NodeBird\"\n      })\n    }), /*#__PURE__*/_jsxs(AppLayout, {\n      children: [/*#__PURE__*/_jsx(NicknameEditForm, {}), /*#__PURE__*/_jsx(FollowList, {\n        header: \"\\uD314\\uB85C\\uC789\",\n        data: followingsData,\n        onClickMore: loadMoreFollowings,\n        loading: !followersData && !followingsData\n      }), /*#__PURE__*/_jsx(FollowList, {\n        header: \"\\uD314\\uB85C\\uC6CC\",\n        data: followersData,\n        onClickMore: loadMoreFollowers,\n        loading: !followersData && !followingsData\n      })]\n    })]\n  });\n};\n\nexport const getServerSideProps = wrapper.getServerSideProps(async context => {\n  const cookie = context.req ? context.req.headers.cookie : '';\n  axios.defaults.headers.Cookie = '';\n\n  if (context.req && cookie) {\n    // 쿠키공유차단\n    axios.defaults.headers.Cookie = cookie; // 서버로 쿠키전달\n  }\n\n  context.store.dispatch({\n    type: LOAD_MY_INFO_REQUEST\n  });\n  context.store.dispatch(END);\n  await context.store.sagaTask.toPromise();\n});\nexport default Profile;","map":null,"metadata":{},"sourceType":"module"}