{"ast":null,"code":"import _regeneratorRuntime from \"C:/major/react-NodeBird/prepare/front/node_modules/@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(logIn),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(logOut),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(watchLogIn),\n    _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(watchLogOut),\n    _marked5 = /*#__PURE__*/_regeneratorRuntime.mark(userSaga);\n\nimport axios from 'axios';\nimport { all, takeLatest, fork, delay, put } from \"redux-saga/effects\"; //all: 안에있는effects동시실행 fork: 비동기함수호출 call: 동기함수호출 put: dispatch\n//take: 기다린다(동기) takeEvery: 기다린다(비동기)\n\nfunction logInAPI(data) {\n  return axios.post('/api/login', data);\n}\n\nfunction logIn(action) {\n  return _regeneratorRuntime.wrap(function logIn$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          console.log('saga logIn'); //const result = yield call(logInAPI);\n\n          _context.next = 4;\n          return delay(1000);\n\n        case 4:\n          _context.next = 6;\n          return put({\n            type: 'LOG_IN_SUCCESS',\n            data: action.data\n          });\n\n        case 6:\n          _context.next = 13;\n          break;\n\n        case 8:\n          _context.prev = 8;\n          _context.t0 = _context[\"catch\"](0);\n          console.error(_context.t0);\n          _context.next = 13;\n          return put({\n            type: 'LOG_IN_FAILURE',\n            error: _context.t0.response.data\n          });\n\n        case 13:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 8]]);\n}\n\nfunction logOutAPI() {\n  return axios.post('/api/logout');\n}\n\nfunction logOut() {\n  return _regeneratorRuntime.wrap(function logOut$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.prev = 0;\n          _context2.next = 3;\n          return delay(1000);\n\n        case 3:\n          _context2.next = 5;\n          return put({\n            type: 'LOG_OUT_SUCCESS' //data: result.data\n\n          });\n\n        case 5:\n          _context2.next = 11;\n          break;\n\n        case 7:\n          _context2.prev = 7;\n          _context2.t0 = _context2[\"catch\"](0);\n          _context2.next = 11;\n          return put({\n            type: 'LOG_OUT_FAILURE',\n            data: _context2.t0.response.data\n          });\n\n        case 11:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, null, [[0, 7]]);\n}\n\nfunction watchLogIn() {\n  return _regeneratorRuntime.wrap(function watchLogIn$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return takeLatest('LOG_IN_REQUEST', logIn);\n\n        case 2:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3);\n}\n\nfunction watchLogOut() {\n  return _regeneratorRuntime.wrap(function watchLogOut$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return takeLatest('LOG_OUT_REQUEST', logOut);\n\n        case 2:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4);\n}\n\nexport default function userSaga() {\n  return _regeneratorRuntime.wrap(function userSaga$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.next = 2;\n          return all([fork(watchLogIn), fork(watchLogOut)]);\n\n        case 2:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5);\n}","map":{"version":3,"sources":["C:/major/react-NodeBird/prepare/front/sagas/user.js"],"names":["logIn","logOut","watchLogIn","watchLogOut","userSaga","axios","all","takeLatest","fork","delay","put","logInAPI","data","post","action","console","log","type","error","response","logOutAPI"],"mappings":";;oDAQUA,K;qDAoBAC,M;qDAgBAC,U;qDAGAC,W;qDAGeC,Q;;AAlDzB,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,GAAT,EAAcC,UAAd,EAA0BC,IAA1B,EAAgCC,KAAhC,EAAuCC,GAAvC,QAAkD,oBAAlD,C,CACA;AACA;;AAEA,SAASC,QAAT,CAAkBC,IAAlB,EAAuB;AACnB,SAAOP,KAAK,CAACQ,IAAN,CAAW,YAAX,EAAyBD,IAAzB,CAAP;AACH;;AACD,SAAUZ,KAAV,CAAgBc,MAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAEQC,UAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EAFR,CAGQ;;AAHR;AAIQ,iBAAMP,KAAK,CAAC,IAAD,CAAX;;AAJR;AAAA;AAKQ,iBAAMC,GAAG,CAAC;AACNO,YAAAA,IAAI,EAAE,gBADA;AAENL,YAAAA,IAAI,EAAEE,MAAM,CAACF;AAFP,WAAD,CAAT;;AALR;AAAA;AAAA;;AAAA;AAAA;AAAA;AAUQG,UAAAA,OAAO,CAACG,KAAR;AAVR;AAWQ,iBAAMR,GAAG,CAAC;AACNO,YAAAA,IAAI,EAAE,gBADA;AAENC,YAAAA,KAAK,EAAE,YAAIC,QAAJ,CAAaP;AAFd,WAAD,CAAT;;AAXR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAiBA,SAASQ,SAAT,GAAoB;AAChB,SAAOf,KAAK,CAACQ,IAAN,CAAW,aAAX,CAAP;AACH;;AACD,SAAUZ,MAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEQ,iBAAMQ,KAAK,CAAC,IAAD,CAAX;;AAFR;AAAA;AAIQ,iBAAMC,GAAG,CAAC;AACNO,YAAAA,IAAI,EAAE,iBADA,CAEN;;AAFM,WAAD,CAAT;;AAJR;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AASQ,iBAAMP,GAAG,CAAC;AACNO,YAAAA,IAAI,EAAE,iBADA;AAENL,YAAAA,IAAI,EAAE,aAAIO,QAAJ,CAAaP;AAFb,WAAD,CAAT;;AATR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAgBA,SAAUV,UAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACI,iBAAMK,UAAU,CAAC,gBAAD,EAAmBP,KAAnB,CAAhB;;AADJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAGA,SAAUG,WAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACI,iBAAMI,UAAU,CAAC,iBAAD,EAAoBN,MAApB,CAAhB;;AADJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAGA,eAAe,SAAUG,QAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACX,iBAAME,GAAG,CAAC,CACNE,IAAI,CAACN,UAAD,CADE,EAENM,IAAI,CAACL,WAAD,CAFE,CAAD,CAAT;;AADW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import axios from 'axios';\r\nimport { all, takeLatest, fork, delay, put } from \"redux-saga/effects\";\r\n//all: 안에있는effects동시실행 fork: 비동기함수호출 call: 동기함수호출 put: dispatch\r\n//take: 기다린다(동기) takeEvery: 기다린다(비동기)\r\n\r\nfunction logInAPI(data){\r\n    return axios.post('/api/login', data);\r\n}\r\nfunction* logIn(action){\r\n    try{\r\n        console.log('saga logIn');\r\n        //const result = yield call(logInAPI);\r\n        yield delay(1000);\r\n        yield put({\r\n            type: 'LOG_IN_SUCCESS',\r\n            data: action.data,\r\n        });\r\n    } catch(err){\r\n        console.error(err);\r\n        yield put({\r\n            type: 'LOG_IN_FAILURE',\r\n            error: err.response.data,\r\n        });\r\n    }\r\n}\r\nfunction logOutAPI(){\r\n    return axios.post('/api/logout');\r\n}\r\nfunction* logOut(){\r\n    try{\r\n        yield delay(1000);\r\n        //const result = yield call(logOutAPI);\r\n        yield put({\r\n            type: 'LOG_OUT_SUCCESS',\r\n            //data: result.data\r\n        });\r\n    } catch (err){\r\n        yield put({\r\n            type: 'LOG_OUT_FAILURE',\r\n            data: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction* watchLogIn(){\r\n    yield takeLatest('LOG_IN_REQUEST', logIn);\r\n}\r\nfunction* watchLogOut(){\r\n    yield takeLatest('LOG_OUT_REQUEST', logOut);\r\n}\r\nexport default function* userSaga() {\r\n    yield all([\r\n        fork(watchLogIn),\r\n        fork(watchLogOut),\r\n    ])\r\n}"]},"metadata":{},"sourceType":"module"}