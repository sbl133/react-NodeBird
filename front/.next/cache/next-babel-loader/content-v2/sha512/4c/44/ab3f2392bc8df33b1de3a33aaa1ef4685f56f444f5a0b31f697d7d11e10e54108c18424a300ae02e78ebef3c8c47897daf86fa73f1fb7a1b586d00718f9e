{"ast":null,"code":"import axios from 'axios';\nimport { all, call, fork, put, takeLatest, throttle } from 'redux-saga/effects'; // all: 안에있는effects동시실행 fork: 비동기함수호출 call: 동기함수호출 put: dispatch\n// take: 기다린다(동기) takeEvery: 기다린다.(비동기)\n// throttle 인자밀리초안에 한번만 take\n\nimport { ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE, REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS, REMOVE_POST_FAILURE, LOAD_POSTS_REQUEST, LOAD_POSTS_SUCCESS, LOAD_POSTS_FAILURE, LIKE_POST_REQUEST, LIKE_POST_SUCCESS, LIKE_POST_FAILURE, UNLIKE_POST_REQUEST, UNLIKE_POST_SUCCESS, UNLIKE_POST_FAILURE, UPLOAD_IMAGES_REQUEST, UPLOAD_IMAGES_SUCCESS, UPLOAD_IMAGES_FAILURE, RETWEET_REQUEST, RETWEET_SUCCESS, RETWEET_FAILURE, LOAD_POST_REQUEST, LOAD_POST_SUCCESS, LOAD_POST_FAILURE, LOAD_USER_POSTS_REQUEST, LOAD_USER_POSTS_FAILURE, LOAD_USER_POSTS_SUCCESS, LOAD_HASHTAG_POSTS_REQUEST, LOAD_HASHTAG_POSTS_FAILURE, LOAD_HASHTAG_POSTS_SUCCESS } from '../reducers/post';\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from '../reducers/user';\n\nfunction loadUserPostsAPI(data, lastId) {\n  return axios.get(`/user/${data}/posts?lastId=${lastId || 0}`); // 쿼리스트링 ?키=값\n  // get의 두번쨰인자는 withCredentials자리\n}\n\nfunction* loadUserPosts(action) {\n  try {\n    const result = yield call(loadUserPostsAPI, action.data, action.lastId);\n    yield put({\n      type: LOAD_USER_POSTS_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    yield put({\n      type: LOAD_USER_POSTS_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction loadHashtagPostsAPI(data, lastId) {\n  return axios.get(`/hashtag/${data}?lastId=${lastId || 0}`); // 쿼리스트링 ?키=값\n  // get의 두번쨰인자는 withCredentials자리\n}\n\nfunction* loadHashtagPosts(action) {\n  try {\n    const result = yield call(loadHashtagPostsAPI, action.data, action.lastId);\n    yield put({\n      type: LOAD_HASHTAG_POSTS_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    yield put({\n      type: LOAD_HASHTAG_POSTS_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction retweetAPI(data) {\n  return axios.post(`/post/${data}/retweet`); // FormData그대로 back에 전달\n}\n\nfunction* retweet(action) {\n  try {\n    const result = yield call(retweetAPI, action.data);\n    yield put({\n      type: RETWEET_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    yield put({\n      type: RETWEET_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction uploadImagesAPI(data) {\n  return axios.post('/post/images', data); // FormData그대로 back에 전달\n}\n\nfunction* uploadImages(action) {\n  try {\n    const result = yield call(uploadImagesAPI, action.data);\n    yield put({\n      type: UPLOAD_IMAGES_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    yield put({\n      type: UPLOAD_IMAGES_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction likePostAPI(data) {\n  return axios.patch(`/post/${data}/like`);\n}\n\nfunction* likePost(action) {\n  try {\n    const result = yield call(likePostAPI, action.data);\n    yield put({\n      type: LIKE_POST_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    yield put({\n      type: LIKE_POST_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction unlikePostAPI(data) {\n  return axios.delete(`/post/${data}/like`);\n}\n\nfunction* unlikePost(action) {\n  try {\n    const result = yield call(unlikePostAPI, action.data);\n    yield put({\n      type: UNLIKE_POST_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    yield put({\n      type: UNLIKE_POST_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction loadPostAPI(data) {\n  return axios.get(`/post/${data}`);\n}\n\nfunction* loadPost(action) {\n  try {\n    const result = yield call(loadPostAPI, action.data);\n    yield put({\n      type: LOAD_POST_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: LOAD_POST_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction loadPostsAPI(lastId) {\n  return axios.get(`/posts?lastId=${lastId || 0}`); // 쿼리스트링 ?키=값\n  // get의 두번쨰인자는 withCredentials자리\n}\n\nfunction* loadPosts(action) {\n  try {\n    const result = yield call(loadPostsAPI, action.lastId);\n    yield put({\n      type: LOAD_POSTS_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    yield put({\n      type: LOAD_POSTS_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction addPostAPI(data) {\n  return axios.post('/post', data);\n}\n\nfunction* addPost(action) {\n  try {\n    const result = yield call(addPostAPI, action.data);\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: result.data\n    });\n    yield put({\n      type: ADD_POST_TO_ME,\n      data: result.data.id\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_POST_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction removePostAPI(data) {\n  return axios.delete(`post/${data}`); // delete는 data못넣요\n}\n\nfunction* removePost(action) {\n  try {\n    const result = yield call(removePostAPI, action.data);\n    yield put({\n      type: REMOVE_POST_SUCCESS,\n      data: result.data\n    });\n    yield put({\n      type: REMOVE_POST_OF_ME,\n      data: result.data\n    });\n  } catch (err) {\n    yield put({\n      type: REMOVE_POST_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction addCommentAPI(data) {\n  return axios.post(`/post/${data.postId}/comment`, data);\n}\n\nfunction* addComment(action) {\n  try {\n    const result = yield call(addCommentAPI, action.data);\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\nfunction* watchRemovePost() {\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\n}\n\nfunction* watchLoadPosts() {\n  yield throttle(5000, LOAD_POSTS_REQUEST, loadPosts);\n}\n\nfunction* watchLoadPost() {\n  yield takeLatest(LOAD_POST_REQUEST, loadPost);\n}\n\nfunction* watchLikePost() {\n  yield takeLatest(LIKE_POST_REQUEST, likePost);\n}\n\nfunction* watchUnlikePost() {\n  yield takeLatest(UNLIKE_POST_REQUEST, unlikePost);\n}\n\nfunction* watchUploadImages() {\n  yield takeLatest(UPLOAD_IMAGES_REQUEST, uploadImages);\n}\n\nfunction* watchRetweet() {\n  yield takeLatest(RETWEET_REQUEST, retweet);\n}\n\nfunction* watchLoadUserPosts() {\n  yield throttle(5000, LOAD_USER_POSTS_REQUEST, loadUserPosts);\n}\n\nfunction* watchLoadHashtagPosts() {\n  yield throttle(5000, LOAD_HASHTAG_POSTS_REQUEST, loadHashtagPosts);\n}\n\nexport default function* postSaga() {\n  yield all([fork(watchRetweet), fork(watchUploadImages), fork(watchAddPost), fork(watchLoadPost), fork(watchLoadPosts), fork(watchLoadUserPosts), fork(watchLoadHashtagPosts), fork(watchAddComment), fork(watchRemovePost), fork(watchLikePost), fork(watchUnlikePost)]);\n}","map":{"version":3,"sources":["C:/major/react-NodeBird/prepare/front/sagas/post.js"],"names":["axios","all","call","fork","put","takeLatest","throttle","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","LOAD_POSTS_FAILURE","LIKE_POST_REQUEST","LIKE_POST_SUCCESS","LIKE_POST_FAILURE","UNLIKE_POST_REQUEST","UNLIKE_POST_SUCCESS","UNLIKE_POST_FAILURE","UPLOAD_IMAGES_REQUEST","UPLOAD_IMAGES_SUCCESS","UPLOAD_IMAGES_FAILURE","RETWEET_REQUEST","RETWEET_SUCCESS","RETWEET_FAILURE","LOAD_POST_REQUEST","LOAD_POST_SUCCESS","LOAD_POST_FAILURE","LOAD_USER_POSTS_REQUEST","LOAD_USER_POSTS_FAILURE","LOAD_USER_POSTS_SUCCESS","LOAD_HASHTAG_POSTS_REQUEST","LOAD_HASHTAG_POSTS_FAILURE","LOAD_HASHTAG_POSTS_SUCCESS","ADD_POST_TO_ME","REMOVE_POST_OF_ME","loadUserPostsAPI","data","lastId","get","loadUserPosts","action","result","type","err","error","response","loadHashtagPostsAPI","loadHashtagPosts","retweetAPI","post","retweet","uploadImagesAPI","uploadImages","likePostAPI","patch","likePost","unlikePostAPI","delete","unlikePost","loadPostAPI","loadPost","console","loadPostsAPI","loadPosts","addPostAPI","addPost","id","removePostAPI","removePost","addCommentAPI","postId","addComment","watchAddComment","watchAddPost","watchRemovePost","watchLoadPosts","watchLoadPost","watchLikePost","watchUnlikePost","watchUploadImages","watchRetweet","watchLoadUserPosts","watchLoadHashtagPosts","postSaga"],"mappings":"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","sourcesContent":["import axios from 'axios';\r\nimport { all, call, fork, put, takeLatest, throttle } from 'redux-saga/effects';\r\n// all: 안에있는effects동시실행 fork: 비동기함수호출 call: 동기함수호출 put: dispatch\r\n// take: 기다린다(동기) takeEvery: 기다린다.(비동기)\r\n// throttle 인자밀리초안에 한번만 take\r\nimport {\r\n    ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE,\r\n    ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE,\r\n    REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS, REMOVE_POST_FAILURE,\r\n    LOAD_POSTS_REQUEST, LOAD_POSTS_SUCCESS, LOAD_POSTS_FAILURE,\r\n    LIKE_POST_REQUEST, LIKE_POST_SUCCESS, LIKE_POST_FAILURE,\r\n    UNLIKE_POST_REQUEST, UNLIKE_POST_SUCCESS, UNLIKE_POST_FAILURE,\r\n    UPLOAD_IMAGES_REQUEST, UPLOAD_IMAGES_SUCCESS, UPLOAD_IMAGES_FAILURE,\r\n    RETWEET_REQUEST, RETWEET_SUCCESS, RETWEET_FAILURE,\r\n    LOAD_POST_REQUEST, LOAD_POST_SUCCESS, LOAD_POST_FAILURE,\r\n    LOAD_USER_POSTS_REQUEST, LOAD_USER_POSTS_FAILURE, LOAD_USER_POSTS_SUCCESS,\r\n    LOAD_HASHTAG_POSTS_REQUEST, LOAD_HASHTAG_POSTS_FAILURE, LOAD_HASHTAG_POSTS_SUCCESS,\r\n} from '../reducers/post';\r\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from '../reducers/user';\r\n\r\nfunction loadUserPostsAPI(data, lastId) {\r\n    return axios.get(`/user/${data}/posts?lastId=${lastId || 0}`);// 쿼리스트링 ?키=값\r\n    // get의 두번쨰인자는 withCredentials자리\r\n}\r\nfunction* loadUserPosts(action) {\r\n    try {\r\n        const result = yield call(loadUserPostsAPI, action.data, action.lastId);\r\n        yield put({\r\n            type: LOAD_USER_POSTS_SUCCESS,\r\n            data: result.data,\r\n        });\r\n    } catch (err) {\r\n        yield put({\r\n            type: LOAD_USER_POSTS_FAILURE,\r\n            error: err.response.data,\r\n        });\r\n    }\r\n}\r\nfunction loadHashtagPostsAPI(data, lastId) {\r\n    return axios.get(`/hashtag/${data}?lastId=${lastId || 0}`);// 쿼리스트링 ?키=값\r\n    // get의 두번쨰인자는 withCredentials자리\r\n}\r\nfunction* loadHashtagPosts(action) {\r\n    try {\r\n        const result = yield call(loadHashtagPostsAPI, action.data, action.lastId);\r\n        yield put({\r\n            type: LOAD_HASHTAG_POSTS_SUCCESS,\r\n            data: result.data,\r\n        });\r\n    } catch (err) {\r\n        yield put({\r\n            type: LOAD_HASHTAG_POSTS_FAILURE,\r\n            error: err.response.data,\r\n        });\r\n    }\r\n}\r\nfunction retweetAPI(data) {\r\n    return axios.post(`/post/${data}/retweet`);// FormData그대로 back에 전달\r\n}\r\nfunction* retweet(action) {\r\n    try {\r\n        const result = yield call(retweetAPI, action.data);\r\n        yield put({\r\n            type: RETWEET_SUCCESS,\r\n            data: result.data,\r\n        });\r\n    } catch (err) {\r\n        yield put({\r\n            type: RETWEET_FAILURE,\r\n            error: err.response.data,\r\n        });\r\n    }\r\n}\r\nfunction uploadImagesAPI(data) {\r\n    return axios.post('/post/images', data);// FormData그대로 back에 전달\r\n}\r\nfunction* uploadImages(action) {\r\n    try {\r\n        const result = yield call(uploadImagesAPI, action.data);\r\n        yield put({\r\n            type: UPLOAD_IMAGES_SUCCESS,\r\n            data: result.data,\r\n        });\r\n    } catch (err) {\r\n        yield put({\r\n            type: UPLOAD_IMAGES_FAILURE,\r\n            error: err.response.data,\r\n        });\r\n    }\r\n}\r\nfunction likePostAPI(data) {\r\n    return axios.patch(`/post/${data}/like`);\r\n}\r\nfunction* likePost(action) {\r\n    try {\r\n        const result = yield call(likePostAPI, action.data);\r\n        yield put({\r\n            type: LIKE_POST_SUCCESS,\r\n            data: result.data,\r\n        });\r\n    } catch (err) {\r\n        yield put({\r\n            type: LIKE_POST_FAILURE,\r\n            error: err.response.data,\r\n        });\r\n    }\r\n}\r\nfunction unlikePostAPI(data) {\r\n    return axios.delete(`/post/${data}/like`);\r\n}\r\nfunction* unlikePost(action) {\r\n    try {\r\n        const result = yield call(unlikePostAPI, action.data);\r\n        yield put({\r\n            type: UNLIKE_POST_SUCCESS,\r\n            data: result.data,\r\n        });\r\n    } catch (err) {\r\n        yield put({\r\n            type: UNLIKE_POST_FAILURE,\r\n            error: err.response.data,\r\n        });\r\n    }\r\n}\r\nfunction loadPostAPI(data) {\r\n    return axios.get(`/post/${data}`);\r\n}\r\nfunction* loadPost(action) {\r\n    try {\r\n        const result = yield call(loadPostAPI, action.data);\r\n        yield put({\r\n            type: LOAD_POST_SUCCESS,\r\n            data: result.data,\r\n        });\r\n    } catch (err) {\r\n        console.error(err);\r\n        yield put({\r\n            type: LOAD_POST_FAILURE,\r\n            error: err.response.data,\r\n        });\r\n    }\r\n}\r\nfunction loadPostsAPI(lastId) {\r\n    return axios.get(`/posts?lastId=${lastId || 0}`);// 쿼리스트링 ?키=값\r\n    // get의 두번쨰인자는 withCredentials자리\r\n}\r\nfunction* loadPosts(action) {\r\n    try {\r\n        const result = yield call(loadPostsAPI, action.lastId);\r\n        yield put({\r\n            type: LOAD_POSTS_SUCCESS,\r\n            data: result.data,\r\n        });\r\n    } catch (err) {\r\n        yield put({\r\n            type: LOAD_POSTS_FAILURE,\r\n            error: err.response.data,\r\n        });\r\n    }\r\n}\r\nfunction addPostAPI(data) {\r\n    return axios.post('/post', data);\r\n}\r\nfunction* addPost(action) {\r\n    try {\r\n        const result = yield call(addPostAPI, action.data);\r\n        yield put({\r\n            type: ADD_POST_SUCCESS,\r\n            data: result.data,\r\n        });\r\n        yield put({\r\n            type: ADD_POST_TO_ME,\r\n            data: result.data.id,\r\n        });\r\n    } catch (err) {\r\n        yield put({\r\n            type: ADD_POST_FAILURE,\r\n            error: err.response.data,\r\n        });\r\n    }\r\n}\r\nfunction removePostAPI(data) {\r\n    return axios.delete(`post/${data}`); // delete는 data못넣요\r\n}\r\nfunction* removePost(action) {\r\n    try {\r\n        const result = yield call(removePostAPI, action.data);\r\n        yield put({\r\n            type: REMOVE_POST_SUCCESS,\r\n            data: result.data,\r\n        });\r\n        yield put({\r\n            type: REMOVE_POST_OF_ME,\r\n            data: result.data,\r\n        });\r\n    } catch (err) {\r\n        yield put({\r\n            type: REMOVE_POST_FAILURE,\r\n            error: err.response.data,\r\n        });\r\n    }\r\n}\r\nfunction addCommentAPI(data) {\r\n    return axios.post(`/post/${data.postId}/comment`, data);\r\n}\r\nfunction* addComment(action) {\r\n    try {\r\n        const result = yield call(addCommentAPI, action.data);\r\n        yield put({\r\n            type: ADD_COMMENT_SUCCESS,\r\n            data: result.data,\r\n        });\r\n    } catch (err) {\r\n        console.error(err);\r\n        yield put({\r\n            type: ADD_COMMENT_FAILURE,\r\n            error: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction* watchAddComment() {\r\n    yield takeLatest(ADD_COMMENT_REQUEST, addComment);\r\n}\r\nfunction* watchAddPost() {\r\n    yield takeLatest(ADD_POST_REQUEST, addPost);\r\n}\r\nfunction* watchRemovePost() {\r\n    yield takeLatest(REMOVE_POST_REQUEST, removePost);\r\n}\r\nfunction* watchLoadPosts() {\r\n    yield throttle(5000, LOAD_POSTS_REQUEST, loadPosts);\r\n}\r\nfunction* watchLoadPost() {\r\n    yield takeLatest(LOAD_POST_REQUEST, loadPost);\r\n}\r\nfunction* watchLikePost() {\r\n    yield takeLatest(LIKE_POST_REQUEST, likePost);\r\n}\r\nfunction* watchUnlikePost() {\r\n    yield takeLatest(UNLIKE_POST_REQUEST, unlikePost);\r\n}\r\nfunction* watchUploadImages() {\r\n    yield takeLatest(UPLOAD_IMAGES_REQUEST, uploadImages);\r\n}\r\nfunction* watchRetweet() {\r\n    yield takeLatest(RETWEET_REQUEST, retweet);\r\n}\r\nfunction* watchLoadUserPosts() {\r\n    yield throttle(5000, LOAD_USER_POSTS_REQUEST, loadUserPosts);\r\n}\r\nfunction* watchLoadHashtagPosts() {\r\n    yield throttle(5000, LOAD_HASHTAG_POSTS_REQUEST, loadHashtagPosts);\r\n}\r\nexport default function* postSaga() {\r\n    yield all([\r\n        fork(watchRetweet),\r\n        fork(watchUploadImages),\r\n        fork(watchAddPost),\r\n        fork(watchLoadPost),\r\n        fork(watchLoadPosts),\r\n        fork(watchLoadUserPosts),\r\n        fork(watchLoadHashtagPosts),\r\n        fork(watchAddComment),\r\n        fork(watchRemovePost),\r\n        fork(watchLikePost),\r\n        fork(watchUnlikePost),\r\n    ]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}