{"ast":null,"code":"import axios from 'axios';\nimport { all, call, fork, put, takeLatest, throttle } from 'redux-saga/effects'; // all: 안에있는effects동시실행 fork: 비동기함수호출 call: 동기함수호출 put: dispatch\n// take: 기다린다(동기) takeEvery: 기다린다.(비동기)\n// throttle 인자밀리초안에 한번만 take\n\nimport { ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE, REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS, REMOVE_POST_FAILURE, LOAD_POSTS_REQUEST, LOAD_POSTS_SUCCESS, LOAD_POSTS_FAILURE, LIKE_POST_REQUEST, LIKE_POST_SUCCESS, LIKE_POST_FAILURE, UNLIKE_POST_REQUEST, UNLIKE_POST_SUCCESS, UNLIKE_POST_FAILURE, UPLOAD_IMAGES_REQUEST, UPLOAD_IMAGES_SUCCESS, UPLOAD_IMAGES_FAILURE, RETWEET_REQUEST, RETWEET_SUCCESS, RETWEET_FAILURE } from '../reducers/post';\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from '../reducers/user';\n\nfunction retweetAPI(data) {\n  return axios.post(`/post/${data}/retweet`); // FormData그대로 back에 전달\n}\n\nfunction* retweet(action) {\n  try {\n    const result = yield call(retweetAPI, action.data);\n    yield put({\n      type: RETWEET_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    yield put({\n      type: RETWEET_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction uploadImagesAPI(data) {\n  return axios.post('/post/images', data); // FormData그대로 back에 전달\n}\n\nfunction* uploadImages(action) {\n  try {\n    const result = yield call(uploadImagesAPI, action.data);\n    yield put({\n      type: UPLOAD_IMAGES_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    yield put({\n      type: UPLOAD_IMAGES_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction likePostAPI(data) {\n  return axios.patch(`/post/${data}/like`);\n}\n\nfunction* likePost(action) {\n  try {\n    const result = yield call(likePostAPI, action.data);\n    yield put({\n      type: LIKE_POST_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    yield put({\n      type: LIKE_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction unlikePostAPI(data) {\n  return axios.delete(`/post/${data}/like`);\n}\n\nfunction* unlikePost(action) {\n  try {\n    const result = yield call(unlikePostAPI, action.data);\n    yield put({\n      type: UNLIKE_POST_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    yield put({\n      type: UNLIKE_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction loadPostAPI(data) {\n  return axios.get('/posts', data);\n}\n\nfunction* loadPost(action) {\n  try {\n    const result = yield call(loadPostAPI, action.data);\n    yield put({\n      type: LOAD_POSTS_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    yield put({\n      type: LOAD_POSTS_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction addPostAPI(data) {\n  return axios.post('/post', data);\n}\n\nfunction* addPost(action) {\n  try {\n    const result = yield call(addPostAPI, action.data);\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: result.data\n    });\n    yield put({\n      type: ADD_POST_TO_ME,\n      data: result.data.id\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction removePostAPI(data) {\n  return axios.delete(`post/${data}`); // delete는 data못넣요\n}\n\nfunction* removePost(action) {\n  try {\n    const result = yield call(removePostAPI, action.data);\n    yield put({\n      type: REMOVE_POST_SUCCESS,\n      data: result.data\n    });\n    yield put({\n      type: REMOVE_POST_OF_ME,\n      data: result.data\n    });\n  } catch (err) {\n    yield put({\n      type: REMOVE_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction addCommentAPI(data) {\n  return axios.post(`/post/${data.postId}/comment`, data);\n}\n\nfunction* addComment(action) {\n  try {\n    const result = yield call(addCommentAPI, action.data);\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\nfunction* watchRemovePost() {\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\n}\n\nfunction* watchLoadPost() {\n  yield throttle(5000, LOAD_POSTS_REQUEST, loadPost);\n}\n\nfunction* watchLikePost() {\n  yield takeLatest(LIKE_POST_REQUEST, likePost);\n}\n\nfunction* watchUnlikePost() {\n  yield takeLatest(UNLIKE_POST_REQUEST, unlikePost);\n}\n\nfunction* watchUploadImages() {\n  yield takeLatest(UPLOAD_IMAGES_REQUEST, uploadImages);\n}\n\nfunction* watchRetweet() {\n  yield takeLatest(RETWEET_REQUEST, retweet);\n}\n\nexport default function* postSaga() {\n  yield all([fork(watchRetweet), fork(watchUploadImages), fork(watchAddPost), fork(watchLoadPost), fork(watchAddComment), fork(watchRemovePost), fork(watchLikePost), fork(watchUnlikePost)]);\n}","map":{"version":3,"sources":["C:/major/react-NodeBird/prepare/front/sagas/post.js"],"names":["axios","all","call","fork","put","takeLatest","throttle","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","LOAD_POSTS_FAILURE","LIKE_POST_REQUEST","LIKE_POST_SUCCESS","LIKE_POST_FAILURE","UNLIKE_POST_REQUEST","UNLIKE_POST_SUCCESS","UNLIKE_POST_FAILURE","UPLOAD_IMAGES_REQUEST","UPLOAD_IMAGES_SUCCESS","UPLOAD_IMAGES_FAILURE","RETWEET_REQUEST","RETWEET_SUCCESS","RETWEET_FAILURE","ADD_POST_TO_ME","REMOVE_POST_OF_ME","retweetAPI","data","post","retweet","action","result","type","err","response","uploadImagesAPI","uploadImages","likePostAPI","patch","likePost","unlikePostAPI","delete","unlikePost","loadPostAPI","get","loadPost","addPostAPI","addPost","id","removePostAPI","removePost","addCommentAPI","postId","addComment","console","error","watchAddComment","watchAddPost","watchRemovePost","watchLoadPost","watchLikePost","watchUnlikePost","watchUploadImages","watchRetweet","postSaga"],"mappings":"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","sourcesContent":["import axios from 'axios';\r\nimport { all, call, fork, put, takeLatest, throttle } from 'redux-saga/effects';\r\n// all: 안에있는effects동시실행 fork: 비동기함수호출 call: 동기함수호출 put: dispatch\r\n// take: 기다린다(동기) takeEvery: 기다린다.(비동기)\r\n// throttle 인자밀리초안에 한번만 take\r\nimport {\r\n    ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE,\r\n    ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE,\r\n    REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS, REMOVE_POST_FAILURE,\r\n    LOAD_POSTS_REQUEST, LOAD_POSTS_SUCCESS, LOAD_POSTS_FAILURE,\r\n    LIKE_POST_REQUEST, LIKE_POST_SUCCESS, LIKE_POST_FAILURE,\r\n    UNLIKE_POST_REQUEST, UNLIKE_POST_SUCCESS, UNLIKE_POST_FAILURE,\r\n    UPLOAD_IMAGES_REQUEST, UPLOAD_IMAGES_SUCCESS, UPLOAD_IMAGES_FAILURE,\r\n    RETWEET_REQUEST, RETWEET_SUCCESS, RETWEET_FAILURE,\r\n} from '../reducers/post';\r\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from '../reducers/user';\r\n\r\nfunction retweetAPI(data) {\r\n    return axios.post(`/post/${data}/retweet`);// FormData그대로 back에 전달\r\n}\r\nfunction* retweet(action) {\r\n    try {\r\n        const result = yield call(retweetAPI, action.data);\r\n        yield put({\r\n            type: RETWEET_SUCCESS,\r\n            data: result.data,\r\n        });\r\n    } catch (err) {\r\n        yield put({\r\n            type: RETWEET_FAILURE,\r\n            data: err.response.data,\r\n        });\r\n    }\r\n}\r\nfunction uploadImagesAPI(data) {\r\n    return axios.post('/post/images', data);// FormData그대로 back에 전달\r\n}\r\nfunction* uploadImages(action) {\r\n    try {\r\n        const result = yield call(uploadImagesAPI, action.data);\r\n        yield put({\r\n            type: UPLOAD_IMAGES_SUCCESS,\r\n            data: result.data,\r\n        });\r\n    } catch (err) {\r\n        yield put({\r\n            type: UPLOAD_IMAGES_FAILURE,\r\n            data: err.response.data,\r\n        });\r\n    }\r\n}\r\nfunction likePostAPI(data) {\r\n    return axios.patch(`/post/${data}/like`);\r\n}\r\nfunction* likePost(action) {\r\n    try {\r\n        const result = yield call(likePostAPI, action.data);\r\n        yield put({\r\n            type: LIKE_POST_SUCCESS,\r\n            data: result.data,\r\n        });\r\n    } catch (err) {\r\n        yield put({\r\n            type: LIKE_POST_FAILURE,\r\n            data: err.response.data,\r\n        });\r\n    }\r\n}\r\nfunction unlikePostAPI(data) {\r\n    return axios.delete(`/post/${data}/like`);\r\n}\r\nfunction* unlikePost(action) {\r\n    try {\r\n        const result = yield call(unlikePostAPI, action.data);\r\n        yield put({\r\n            type: UNLIKE_POST_SUCCESS,\r\n            data: result.data,\r\n        });\r\n    } catch (err) {\r\n        yield put({\r\n            type: UNLIKE_POST_FAILURE,\r\n            data: err.response.data,\r\n        });\r\n    }\r\n}\r\nfunction loadPostAPI(data) {\r\n    return axios.get('/posts', data);\r\n}\r\nfunction* loadPost(action) {\r\n    try {\r\n        const result = yield call(loadPostAPI, action.data);\r\n        yield put({\r\n            type: LOAD_POSTS_SUCCESS,\r\n            data: result.data,\r\n        });\r\n    } catch (err) {\r\n        yield put({\r\n            type: LOAD_POSTS_FAILURE,\r\n            data: err.response.data,\r\n        });\r\n    }\r\n}\r\nfunction addPostAPI(data) {\r\n    return axios.post('/post', data);\r\n}\r\nfunction* addPost(action) {\r\n    try {\r\n        const result = yield call(addPostAPI, action.data);\r\n        yield put({\r\n            type: ADD_POST_SUCCESS,\r\n            data: result.data,\r\n        });\r\n        yield put({\r\n            type: ADD_POST_TO_ME,\r\n            data: result.data.id,\r\n        });\r\n    } catch (err) {\r\n        yield put({\r\n            type: ADD_POST_FAILURE,\r\n            data: err.response.data,\r\n        });\r\n    }\r\n}\r\nfunction removePostAPI(data) {\r\n    return axios.delete(`post/${data}`); // delete는 data못넣요\r\n}\r\nfunction* removePost(action) {\r\n    try {\r\n        const result = yield call(removePostAPI, action.data);\r\n        yield put({\r\n            type: REMOVE_POST_SUCCESS,\r\n            data: result.data,\r\n        });\r\n        yield put({\r\n            type: REMOVE_POST_OF_ME,\r\n            data: result.data,\r\n        });\r\n    } catch (err) {\r\n        yield put({\r\n            type: REMOVE_POST_FAILURE,\r\n            data: err.response.data,\r\n        });\r\n    }\r\n}\r\nfunction addCommentAPI(data) {\r\n    return axios.post(`/post/${data.postId}/comment`, data);\r\n}\r\nfunction* addComment(action) {\r\n    try {\r\n        const result = yield call(addCommentAPI, action.data);\r\n        yield put({\r\n            type: ADD_COMMENT_SUCCESS,\r\n            data: result.data,\r\n        });\r\n    } catch (err) {\r\n        console.error(err);\r\n        yield put({\r\n            type: ADD_COMMENT_FAILURE,\r\n            data: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction* watchAddComment() {\r\n    yield takeLatest(ADD_COMMENT_REQUEST, addComment);\r\n}\r\nfunction* watchAddPost() {\r\n    yield takeLatest(ADD_POST_REQUEST, addPost);\r\n}\r\nfunction* watchRemovePost() {\r\n    yield takeLatest(REMOVE_POST_REQUEST, removePost);\r\n}\r\nfunction* watchLoadPost() {\r\n    yield throttle(5000, LOAD_POSTS_REQUEST, loadPost);\r\n}\r\nfunction* watchLikePost() {\r\n    yield takeLatest(LIKE_POST_REQUEST, likePost);\r\n}\r\nfunction* watchUnlikePost() {\r\n    yield takeLatest(UNLIKE_POST_REQUEST, unlikePost);\r\n}\r\nfunction* watchUploadImages() {\r\n    yield takeLatest(UPLOAD_IMAGES_REQUEST, uploadImages);\r\n}\r\nfunction* watchRetweet() {\r\n    yield takeLatest(RETWEET_REQUEST, retweet);\r\n}\r\nexport default function* postSaga() {\r\n    yield all([\r\n        fork(watchRetweet),\r\n        fork(watchUploadImages),\r\n        fork(watchAddPost),\r\n        fork(watchLoadPost),\r\n        fork(watchAddComment),\r\n        fork(watchRemovePost),\r\n        fork(watchLikePost),\r\n        fork(watchUnlikePost),\r\n    ]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}