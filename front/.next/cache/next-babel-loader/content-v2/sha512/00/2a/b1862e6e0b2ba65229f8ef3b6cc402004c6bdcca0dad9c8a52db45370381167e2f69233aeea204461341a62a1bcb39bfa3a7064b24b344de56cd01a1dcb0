{"ast":null,"code":"import produce from 'immer';\nexport var initialState = {\n  mainPosts: [],\n  imagePaths: [],\n  // 이미지 업로드할때 이미지경로들 저장할곳\n  hasMorePosts: true,\n  loadPostsLoading: false,\n  loadPostsSuccess: false,\n  loadPostsError: null,\n  addPostLoading: false,\n  // 게시글 추가\n  addPostDone: false,\n  addPostError: null,\n  removePostLoading: false,\n  // 게시글 삭제\n  removePostDone: false,\n  removePostError: null,\n  addCommentLoading: false,\n  addCommentDone: false,\n  addCommentError: null,\n  likePostLoading: false,\n  likePostSuccess: false,\n  likePostError: null,\n  unlikePostLoading: false,\n  unlikePostSuccess: false,\n  unlikePostError: null,\n  uploadImagesLoading: false,\n  uploadImagesSuccess: false,\n  uploadImagesError: null,\n  retweetLoading: false,\n  retweetSuccess: false,\n  retweetError: null\n};\nexport var LOAD_POSTS_REQUEST = 'LOAD_POSTS_REQUEST';\nexport var LOAD_POSTS_SUCCESS = 'LOAD_POSTS_SUCCESS';\nexport var LOAD_POSTS_FAILURE = 'LOAD_POSTS_FAILURE';\nexport var ADD_POST_REQUEST = 'ADD_POST_REQUEST';\nexport var ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\nexport var ADD_POST_FAILURE = 'ADD_POST_FAILURE';\nexport var REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\nexport var REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\nexport var REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\nexport var ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\nexport var ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\nexport var ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\nexport var LIKE_POST_REQUEST = 'LIKE_POST_REQUEST';\nexport var LIKE_POST_SUCCESS = 'LIKE_POST_SUCCESS';\nexport var LIKE_POST_FAILURE = 'LIKE_POST_FAILURE';\nexport var UNLIKE_POST_REQUEST = 'UNLIKE_POST_REQUEST';\nexport var UNLIKE_POST_SUCCESS = 'UNLIKE_POST_SUCCESS';\nexport var UNLIKE_POST_FAILURE = 'UNLIKE_POST_FAILURE';\nexport var UPLOAD_IMAGES_REQUEST = 'UPLOAD_IMAGES_REQUEST';\nexport var UPLOAD_IMAGES_SUCCESS = 'UPLOAD_IMAGES_SUCCESS';\nexport var UPLOAD_IMAGES_FAILURE = 'UPLOAD_IMAGES_FAILURE';\nexport var RETWEET_REQUEST = 'RETWEET_REQUEST';\nexport var RETWEET_SUCCESS = 'RETWEET_SUCCESS';\nexport var RETWEET_FAILURE = 'RETWEET_FAILURE';\nexport var REMOVE_IMAGE = 'REMOVE_IMAGE'; // action은 원래 객체(동적할당은 action creater 함수를 만들어서)\n\nexport var addPost = function addPost(data) {\n  return {\n    type: ADD_POST_REQUEST,\n    data: data\n  };\n};\nexport var addComment = function addComment(data) {\n  return {\n    type: ADD_COMMENT_REQUEST,\n    data: data\n  };\n};\n\nvar reducer = function reducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n  return produce(state, function (draft) {\n    switch (action.type) {\n      case RETWEET_REQUEST:\n        draft.retweetLoading = true;\n        draft.retweetDone = false;\n        draft.retweetError = null;\n        break;\n\n      case RETWEET_SUCCESS:\n        draft.retweetLoading = false;\n        draft.retweetDone = true;\n        draft.mainPosts.unshift(action.data);\n        break;\n\n      case RETWEET_FAILURE:\n        draft.retweetLoading = false;\n        console.log(action.data);\n        draft.retweetError = action.error;\n        break;\n\n      case REMOVE_IMAGE:\n        draft.imagePaths = draft.imagePaths.filter(function (v, i) {\n          return i !== action.data;\n        });\n        break;\n\n      case UPLOAD_IMAGES_REQUEST:\n        draft.uploadImagesLoading = true;\n        draft.uploadImagesDone = false;\n        draft.uploadImagesError = null;\n        break;\n\n      case UPLOAD_IMAGES_SUCCESS:\n        draft.imagePaths = action.data;\n        draft.uploadImagesLoading = false;\n        draft.uploadImagesDone = true;\n        break;\n\n      case UPLOAD_IMAGES_FAILURE:\n        draft.uploadImagesLoading = false;\n        draft.uploadImagesError = action.error;\n        break;\n\n      case LIKE_POST_REQUEST:\n        draft.likePostLoading = true;\n        draft.likePostDone = false;\n        draft.likePostError = null;\n        break;\n\n      case LIKE_POST_SUCCESS:\n        {\n          var post = draft.mainPosts.find(function (v) {\n            return v.id === action.data.PostId;\n          });\n          post.Likers.push({\n            id: action.data.UserId\n          });\n          draft.likePostLoading = false;\n          draft.likePostDone = true;\n          break;\n        }\n\n      case LIKE_POST_FAILURE:\n        draft.likePostLoading = false;\n        draft.likePostError = action.error;\n        break;\n\n      case UNLIKE_POST_REQUEST:\n        draft.unlikePostLoading = true;\n        draft.unlikePostDone = false;\n        draft.unlikePostError = null;\n        break;\n\n      case UNLIKE_POST_SUCCESS:\n        {\n          var _post = draft.mainPosts.find(function (v) {\n            return v.id === action.data.PostId;\n          });\n\n          _post.Likers = _post.Likers.filter(function (v) {\n            return v.id !== action.data.UserId;\n          });\n          draft.unlikePostLoading = false;\n          draft.unlikePostDone = true;\n          break;\n        }\n\n      case UNLIKE_POST_FAILURE:\n        draft.unlikePostLoading = false;\n        draft.unlikePostError = action.error;\n        break;\n\n      case LOAD_POSTS_REQUEST:\n        draft.loadPostsLoading = true;\n        draft.loadPostsDone = false;\n        draft.loadPostsError = null;\n        break;\n\n      case LOAD_POSTS_SUCCESS:\n        draft.loadPostsLoading = false;\n        draft.loadPostsDone = true;\n        draft.mainPosts = draft.mainPosts.concat(action.data);\n        draft.hasMorePosts = draft.mainPosts.length < 50;\n        break;\n\n      case LOAD_POSTS_FAILURE:\n        draft.loadPostsLoading = false;\n        draft.loadPostsError = action.error;\n        break;\n\n      case ADD_POST_REQUEST:\n        draft.addPostLoading = true;\n        draft.addPostDone = false;\n        draft.addPostError = null;\n        break;\n\n      case ADD_POST_SUCCESS:\n        draft.addPostLoading = false;\n        draft.addPostDone = true;\n        draft.mainPosts.unshift(action.data);\n        draft.imagePaths = [];\n        break;\n\n      case ADD_POST_FAILURE:\n        draft.addPostLoading = false;\n        draft.addPostError = action.error;\n        break;\n\n      case REMOVE_POST_REQUEST:\n        draft.removePostLoading = true;\n        draft.removePostDone = false;\n        draft.removePostError = null;\n        break;\n\n      case REMOVE_POST_SUCCESS:\n        draft.removePostLoading = false;\n        draft.removePostDone = true;\n        draft.mainPosts = draft.mainPosts.filter(function (v) {\n          return v.id !== action.data.PostId;\n        });\n        break;\n\n      case REMOVE_POST_FAILURE:\n        draft.removePostLoading = false;\n        draft.removePostError = action.error;\n        break;\n\n      case ADD_COMMENT_REQUEST:\n        draft.addCommentLoading = true;\n        draft.addCommentDone = false;\n        draft.addCommentError = null;\n        break;\n\n      case ADD_COMMENT_SUCCESS:\n        {\n          var _post2 = draft.mainPosts.find(function (v) {\n            return v.id === action.data.PostId;\n          });\n\n          _post2.Comments.unshift(action.data);\n\n          draft.addCommentLoading = false;\n          draft.addCommentDone = true;\n          break; // const postIndex = state.mainPosts.findIndex((v) => v.id === action.data.postId);\n          // const post = { ...state.mainPosts[postIndex] };\n          // post.Comments = [dummyComment(action.data), ...post.Comments];\n          // const mainPosts = [...state.mainPosts];\n          // mainPosts[postIndex] = post;\n          // return {\n          //     ...state,\n          //     mainPosts,\n          //     addCommentLoading: false,\n          //     addCommentDone: true,\n          // };\n        }\n\n      case ADD_COMMENT_FAILURE:\n        draft.addCommentLoading = false;\n        draft.addCommentError = true;\n        break;\n\n      default:\n        break;\n    }\n  });\n};\n\nexport default reducer;","map":{"version":3,"sources":["C:/major/react-NodeBird/prepare/front/reducers/post.js"],"names":["produce","initialState","mainPosts","imagePaths","hasMorePosts","loadPostsLoading","loadPostsSuccess","loadPostsError","addPostLoading","addPostDone","addPostError","removePostLoading","removePostDone","removePostError","addCommentLoading","addCommentDone","addCommentError","likePostLoading","likePostSuccess","likePostError","unlikePostLoading","unlikePostSuccess","unlikePostError","uploadImagesLoading","uploadImagesSuccess","uploadImagesError","retweetLoading","retweetSuccess","retweetError","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","LOAD_POSTS_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","LIKE_POST_REQUEST","LIKE_POST_SUCCESS","LIKE_POST_FAILURE","UNLIKE_POST_REQUEST","UNLIKE_POST_SUCCESS","UNLIKE_POST_FAILURE","UPLOAD_IMAGES_REQUEST","UPLOAD_IMAGES_SUCCESS","UPLOAD_IMAGES_FAILURE","RETWEET_REQUEST","RETWEET_SUCCESS","RETWEET_FAILURE","REMOVE_IMAGE","addPost","data","type","addComment","reducer","state","action","draft","retweetDone","unshift","console","log","error","filter","v","i","uploadImagesDone","likePostDone","post","find","id","PostId","Likers","push","UserId","unlikePostDone","loadPostsDone","concat","length","Comments"],"mappings":"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","sourcesContent":["import produce from 'immer';\r\n\r\nexport const initialState = {\r\n    mainPosts: [],\r\n    imagePaths: [], // 이미지 업로드할때 이미지경로들 저장할곳\r\n    hasMorePosts: true,\r\n    loadPostsLoading: false,\r\n    loadPostsSuccess: false,\r\n    loadPostsError: null,\r\n    addPostLoading: false, // 게시글 추가\r\n    addPostDone: false,\r\n    addPostError: null,\r\n    removePostLoading: false, // 게시글 삭제\r\n    removePostDone: false,\r\n    removePostError: null,\r\n    addCommentLoading: false,\r\n    addCommentDone: false,\r\n    addCommentError: null,\r\n    likePostLoading: false,\r\n    likePostSuccess: false,\r\n    likePostError: null,\r\n    unlikePostLoading: false,\r\n    unlikePostSuccess: false,\r\n    unlikePostError: null,\r\n    uploadImagesLoading: false,\r\n    uploadImagesSuccess: false,\r\n    uploadImagesError: null,\r\n    retweetLoading: false,\r\n    retweetSuccess: false,\r\n    retweetError: null,\r\n};\r\n\r\nexport const LOAD_POSTS_REQUEST = 'LOAD_POSTS_REQUEST';\r\nexport const LOAD_POSTS_SUCCESS = 'LOAD_POSTS_SUCCESS';\r\nexport const LOAD_POSTS_FAILURE = 'LOAD_POSTS_FAILURE';\r\n\r\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST';\r\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\r\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE';\r\n\r\nexport const REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\r\nexport const REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\r\nexport const REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\r\n\r\nexport const ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\r\nexport const ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\r\nexport const ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\r\n\r\nexport const LIKE_POST_REQUEST = 'LIKE_POST_REQUEST';\r\nexport const LIKE_POST_SUCCESS = 'LIKE_POST_SUCCESS';\r\nexport const LIKE_POST_FAILURE = 'LIKE_POST_FAILURE';\r\n\r\nexport const UNLIKE_POST_REQUEST = 'UNLIKE_POST_REQUEST';\r\nexport const UNLIKE_POST_SUCCESS = 'UNLIKE_POST_SUCCESS';\r\nexport const UNLIKE_POST_FAILURE = 'UNLIKE_POST_FAILURE';\r\n\r\nexport const UPLOAD_IMAGES_REQUEST = 'UPLOAD_IMAGES_REQUEST';\r\nexport const UPLOAD_IMAGES_SUCCESS = 'UPLOAD_IMAGES_SUCCESS';\r\nexport const UPLOAD_IMAGES_FAILURE = 'UPLOAD_IMAGES_FAILURE';\r\n\r\nexport const RETWEET_REQUEST = 'RETWEET_REQUEST';\r\nexport const RETWEET_SUCCESS = 'RETWEET_SUCCESS';\r\nexport const RETWEET_FAILURE = 'RETWEET_FAILURE';\r\n\r\nexport const REMOVE_IMAGE = 'REMOVE_IMAGE';\r\n\r\n// action은 원래 객체(동적할당은 action creater 함수를 만들어서)\r\nexport const addPost = (data) => ({\r\n    type: ADD_POST_REQUEST,\r\n    data,\r\n});\r\nexport const addComment = (data) => ({\r\n    type: ADD_COMMENT_REQUEST,\r\n    data,\r\n});\r\nconst reducer = (state = initialState, action) => produce(state, (draft) => {\r\n    switch (action.type) {\r\n        case RETWEET_REQUEST:\r\n            draft.retweetLoading = true;\r\n            draft.retweetDone = false;\r\n            draft.retweetError = null;\r\n            break;\r\n        case RETWEET_SUCCESS:\r\n            draft.retweetLoading = false;\r\n            draft.retweetDone = true;\r\n            draft.mainPosts.unshift(action.data);\r\n            break;\r\n        case RETWEET_FAILURE:\r\n            draft.retweetLoading = false;\r\n            console.log(action.data);\r\n            draft.retweetError = action.error;\r\n            break;\r\n        case REMOVE_IMAGE:\r\n            draft.imagePaths = draft.imagePaths.filter((v, i) => i !== action.data);\r\n            break;\r\n        case UPLOAD_IMAGES_REQUEST:\r\n            draft.uploadImagesLoading = true;\r\n            draft.uploadImagesDone = false;\r\n            draft.uploadImagesError = null;\r\n            break;\r\n        case UPLOAD_IMAGES_SUCCESS:\r\n            draft.imagePaths = action.data;\r\n            draft.uploadImagesLoading = false;\r\n            draft.uploadImagesDone = true;\r\n            break;\r\n        case UPLOAD_IMAGES_FAILURE:\r\n            draft.uploadImagesLoading = false;\r\n            draft.uploadImagesError = action.error;\r\n            break;\r\n        case LIKE_POST_REQUEST:\r\n            draft.likePostLoading = true;\r\n            draft.likePostDone = false;\r\n            draft.likePostError = null;\r\n            break;\r\n        case LIKE_POST_SUCCESS: {\r\n            const post = draft.mainPosts.find((v) => v.id === action.data.PostId);\r\n            post.Likers.push({ id: action.data.UserId });\r\n            draft.likePostLoading = false;\r\n            draft.likePostDone = true;\r\n            break;\r\n        }\r\n        case LIKE_POST_FAILURE:\r\n            draft.likePostLoading = false;\r\n            draft.likePostError = action.error;\r\n            break;\r\n        case UNLIKE_POST_REQUEST:\r\n            draft.unlikePostLoading = true;\r\n            draft.unlikePostDone = false;\r\n            draft.unlikePostError = null;\r\n            break;\r\n        case UNLIKE_POST_SUCCESS: {\r\n            const post = draft.mainPosts.find((v) => v.id === action.data.PostId);\r\n            post.Likers = post.Likers.filter((v) => v.id !== action.data.UserId);\r\n            draft.unlikePostLoading = false;\r\n            draft.unlikePostDone = true;\r\n            break;\r\n        }\r\n        case UNLIKE_POST_FAILURE:\r\n            draft.unlikePostLoading = false;\r\n            draft.unlikePostError = action.error;\r\n            break;\r\n        case LOAD_POSTS_REQUEST:\r\n            draft.loadPostsLoading = true;\r\n            draft.loadPostsDone = false;\r\n            draft.loadPostsError = null;\r\n            break;\r\n        case LOAD_POSTS_SUCCESS:\r\n            draft.loadPostsLoading = false;\r\n            draft.loadPostsDone = true;\r\n            draft.mainPosts = draft.mainPosts.concat(action.data);\r\n            draft.hasMorePosts = draft.mainPosts.length < 50;\r\n            break;\r\n        case LOAD_POSTS_FAILURE:\r\n            draft.loadPostsLoading = false;\r\n            draft.loadPostsError = action.error;\r\n            break;\r\n        case ADD_POST_REQUEST:\r\n            draft.addPostLoading = true;\r\n            draft.addPostDone = false;\r\n            draft.addPostError = null;\r\n            break;\r\n        case ADD_POST_SUCCESS:\r\n            draft.addPostLoading = false;\r\n            draft.addPostDone = true;\r\n            draft.mainPosts.unshift(action.data);\r\n            draft.imagePaths = [];\r\n            break;\r\n        case ADD_POST_FAILURE:\r\n            draft.addPostLoading = false;\r\n            draft.addPostError = action.error;\r\n            break;\r\n        case REMOVE_POST_REQUEST:\r\n            draft.removePostLoading = true;\r\n            draft.removePostDone = false;\r\n            draft.removePostError = null;\r\n            break;\r\n        case REMOVE_POST_SUCCESS:\r\n            draft.removePostLoading = false;\r\n            draft.removePostDone = true;\r\n            draft.mainPosts = draft.mainPosts.filter((v) => v.id !== action.data.PostId);\r\n            break;\r\n        case REMOVE_POST_FAILURE:\r\n            draft.removePostLoading = false;\r\n            draft.removePostError = action.error;\r\n            break;\r\n        case ADD_COMMENT_REQUEST:\r\n            draft.addCommentLoading = true;\r\n            draft.addCommentDone = false;\r\n            draft.addCommentError = null;\r\n            break;\r\n        case ADD_COMMENT_SUCCESS: {\r\n            const post = draft.mainPosts.find((v) => v.id === action.data.PostId);\r\n            post.Comments.unshift(action.data);\r\n            draft.addCommentLoading = false;\r\n            draft.addCommentDone = true;\r\n            break;\r\n            // const postIndex = state.mainPosts.findIndex((v) => v.id === action.data.postId);\r\n            // const post = { ...state.mainPosts[postIndex] };\r\n            // post.Comments = [dummyComment(action.data), ...post.Comments];\r\n            // const mainPosts = [...state.mainPosts];\r\n            // mainPosts[postIndex] = post;\r\n            // return {\r\n            //     ...state,\r\n            //     mainPosts,\r\n            //     addCommentLoading: false,\r\n            //     addCommentDone: true,\r\n            // };\r\n        }\r\n        case ADD_COMMENT_FAILURE:\r\n            draft.addCommentLoading = false;\r\n            draft.addCommentError = true;\r\n            break;\r\n        default:\r\n            break;\r\n    }\r\n});\r\n\r\nexport default reducer;\r\n"]},"metadata":{},"sourceType":"module"}