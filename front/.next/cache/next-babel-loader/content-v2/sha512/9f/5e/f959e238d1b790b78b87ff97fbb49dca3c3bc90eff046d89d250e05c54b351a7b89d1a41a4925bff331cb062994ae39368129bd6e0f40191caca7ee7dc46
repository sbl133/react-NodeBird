{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport _slicedToArray from \"C:/major/react-NodeBird/prepare/front/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"C:\\\\major\\\\react-NodeBird\\\\prepare\\\\front\\\\components\\\\PostForm.js\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport React, { useCallback, useRef, useEffect } from 'react';\nimport { Form, Input, Button } from 'antd';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addPost, UPLOAD_IMAGES_REQUEST, REMOVE_IMAGE, ADD_POST_REQUEST } from '../reducers/post';\nimport useInput from '../hooks/useInput';\n\nvar PostForm = function PostForm() {\n  _s();\n\n  var _useSelector = useSelector(function (state) {\n    return state.post;\n  }),\n      imagePaths = _useSelector.imagePaths,\n      addPostDone = _useSelector.addPostDone;\n\n  var _useInput = useInput(''),\n      _useInput2 = _slicedToArray(_useInput, 3),\n      text = _useInput2[0],\n      onChangeText = _useInput2[1],\n      setText = _useInput2[2];\n\n  var dispatch = useDispatch();\n  useEffect(function () {\n    if (addPostDone) {\n      setText('');\n    }\n  }, [addPostDone]);\n  var onSubmit = useCallback(function () {\n    if (!text || !text.trim()) {\n      return alert('게시글을 작성하세요.');\n    }\n\n    var formData = new FormData();\n    imagePaths.forEach(function (p) {\n      formData.append('image', p); // req.body.image\n    });\n    formData.append('content', text); // req.body.content\n\n    return dispatch({\n      type: ADD_POST_REQUEST,\n      data: formData\n    });\n  }, [text, imagePaths]);\n  var imageInput = useRef();\n  var onClickImageUpload = useCallback(function () {\n    imageInput.current.click();\n  }, [imageInput.current]);\n  var onChangeImages = useCallback(function (e) {\n    console.log('images', e.target.files); // e.tartget.files안에 선택한 이미지가 있음\n\n    var imageFormData = new FormData(); // FormData: multipart형식으로 서버에전송\n\n    [].forEach.call(e.target.files, function (f) {\n      imageFormData.append('image', f); // 'image': back이랑 맞춰야되는 key값?\n    });\n    dispatch({\n      type: UPLOAD_IMAGES_REQUEST,\n      data: imageFormData\n    });\n  });\n  var onRemoveImage = useCallback(function (index) {\n    return function () {\n      dispatch({\n        type: REMOVE_IMAGE,\n        data: index\n      });\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(Form, {\n    style: {\n      margin: '10px 0 20px'\n    },\n    encType: \"multipart/form-data\",\n    onFinish: onSubmit,\n    children: [/*#__PURE__*/_jsxDEV(Input.TextArea, {\n      value: text,\n      onChange: onChangeText,\n      maxLength: 140,\n      placeholder: \"\\uC5B4\\uB5A4 \\uC2E0\\uAE30\\uD55C \\uC77C\\uC774 \\uC788\\uC5C8\\uB098\\uC694?\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 13\n    }, _this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        name: \"image\",\n        multiple: true,\n        hidden: true,\n        ref: imageInput,\n        onChange: onChangeImages\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 17\n      }, _this), /*#__PURE__*/_jsxDEV(Button, {\n        onClick: onClickImageUpload,\n        children: \"\\uC774\\uBBF8\\uC9C0 \\uC5C5\\uB85C\\uB4DC\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 17\n      }, _this), /*#__PURE__*/_jsxDEV(Button, {\n        type: \"primary\",\n        style: {\n          \"float\": 'right'\n        },\n        htmlType: \"submit\",\n        children: \"\\uC9F9\\uC9F9\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 17\n      }, _this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 13\n    }, _this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: imagePaths.map(function (v, i) {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            display: 'inline-block'\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"img\", {\n            src: \"http://localhost:3065/\".concat(v),\n            style: {\n              width: '200px'\n            },\n            alt: v\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 25\n          }, _this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: /*#__PURE__*/_jsxDEV(Button, {\n              onClick: onRemoveImage(i),\n              children: \"\\uC81C\\uAC70\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 74,\n              columnNumber: 30\n            }, _this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 74,\n            columnNumber: 25\n          }, _this)]\n        }, v, true, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 21\n        }, _this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 13\n    }, _this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 9\n  }, _this);\n};\n\n_s(PostForm, \"liA3E1rdAKxV0r4viwENA+p3mMo=\", false, function () {\n  return [useSelector, useInput, useDispatch];\n});\n\n_c = PostForm;\nexport default PostForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"PostForm\");","map":{"version":3,"sources":["C:/major/react-NodeBird/prepare/front/components/PostForm.js"],"names":["React","useCallback","useRef","useEffect","Form","Input","Button","useDispatch","useSelector","addPost","UPLOAD_IMAGES_REQUEST","REMOVE_IMAGE","ADD_POST_REQUEST","useInput","PostForm","state","post","imagePaths","addPostDone","text","onChangeText","setText","dispatch","onSubmit","trim","alert","formData","FormData","forEach","p","append","type","data","imageInput","onClickImageUpload","current","click","onChangeImages","e","console","log","target","files","imageFormData","call","f","onRemoveImage","index","margin","map","v","i","display","width"],"mappings":"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","sourcesContent":["import React, { useCallback, useRef, useEffect } from 'react';\r\nimport { Form, Input, Button } from 'antd';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { addPost, UPLOAD_IMAGES_REQUEST, REMOVE_IMAGE, ADD_POST_REQUEST } from '../reducers/post';\r\nimport useInput from '../hooks/useInput';\r\n\r\nconst PostForm = () => {\r\n    const { imagePaths, addPostDone } = useSelector((state) => state.post);\r\n    const [text, onChangeText, setText] = useInput('');\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        if (addPostDone) {\r\n            setText('');\r\n        }\r\n    }, [addPostDone]);\r\n    const onSubmit = useCallback(() => {\r\n        if (!text || !text.trim()) {\r\n            return alert('게시글을 작성하세요.');\r\n        }\r\n        const formData = new FormData();\r\n        imagePaths.forEach((p) => {\r\n            formData.append('image', p); // req.body.image\r\n        });\r\n        formData.append('content', text); // req.body.content\r\n        return dispatch({\r\n            type: ADD_POST_REQUEST,\r\n            data: formData,\r\n        });\r\n    }, [text, imagePaths]);\r\n\r\n    const imageInput = useRef();\r\n    const onClickImageUpload = useCallback(() => {\r\n        imageInput.current.click();\r\n    }, [imageInput.current]);\r\n    const onChangeImages = useCallback((e) => {\r\n        console.log('images', e.target.files); // e.tartget.files안에 선택한 이미지가 있음\r\n        const imageFormData = new FormData(); // FormData: multipart형식으로 서버에전송\r\n        [].forEach.call(e.target.files, (f) => {\r\n            imageFormData.append('image', f); // 'image': back이랑 맞춰야되는 key값?\r\n        });\r\n        dispatch({\r\n            type: UPLOAD_IMAGES_REQUEST,\r\n            data: imageFormData,\r\n        });\r\n    });\r\n    const onRemoveImage = useCallback((index) => () => {\r\n        dispatch({\r\n            type: REMOVE_IMAGE,\r\n            data: index,\r\n        });\r\n    }, []);\r\n    return (\r\n        <Form\r\n        style={{ margin: '10px 0 20px' }}\r\n        encType=\"multipart/form-data\"\r\n        onFinish={onSubmit}\r\n        >\r\n            <Input.TextArea\r\n            value={text}\r\n            onChange={onChangeText}\r\n            maxLength={140}\r\n            placeholder=\"어떤 신기한 일이 있었나요?\"\r\n            />\r\n            <div>\r\n                <input type=\"file\" name=\"image\" multiple hidden ref={imageInput} onChange={onChangeImages} />\r\n                <Button onClick={onClickImageUpload}>이미지 업로드</Button>\r\n                <Button type=\"primary\" style={{ float: 'right' }} htmlType=\"submit\">짹짹</Button>\r\n            </div>\r\n            <div>\r\n                {imagePaths.map((v, i) => (\r\n                    <div key={v} style={{ display: 'inline-block' }}>\r\n                        <img src={`http://localhost:3065/${v}`} style={{ width: '200px' }} alt={v} />\r\n                        <div><Button onClick={onRemoveImage(i)}>제거</Button></div>\r\n                    </div>\r\n                ))}\r\n            </div>\r\n        </Form>\r\n    );\r\n};\r\n\r\nexport default PostForm;\r\n"]},"metadata":{},"sourceType":"module"}