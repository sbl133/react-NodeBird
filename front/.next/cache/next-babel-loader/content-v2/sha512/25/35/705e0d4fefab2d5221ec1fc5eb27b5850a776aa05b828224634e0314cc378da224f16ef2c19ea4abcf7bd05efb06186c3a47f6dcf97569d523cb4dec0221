{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nexport const initialState = {\n  mainPosts: [{\n    id: 1,\n    User: {\n      id: 1,\n      nickname: 'Bum'\n    },\n    content: '첫 번째 게시글 #해시태그 #익스프레스',\n    Images: [{\n      src: 'https://bookthumb-phinf.pstatic.net/cover/137/995/13799585.jpg?udate=20180726'\n    }, {\n      src: 'https://gimg.gilbut.co.kr/book/BN001958/rn_view_BN001958.jpg'\n    }, {\n      src: 'https://gimg.gilbut.co.kr/book/BN001998/rn_view_BN001998.jpg'\n    }],\n    Comments: [{\n      User: {\n        nickname: 'nero'\n      },\n      content: '얼른 사고싶어요~'\n    }]\n  }],\n  imagePaths: [],\n  //이미지 업로드할때 이미지경로들 저장할곳\n  postAdded: false //게시글 추가가 완료됬을떄 true\n\n};\nconst ADD_POST = 'ADD_POST'; //action은 원래 객체(동적할당은 action creater 함수를 만들어서)\n\nexport const addPost = {\n  type: ADD_POST\n};\nconst dummyPost = {\n  id: 2,\n  content: '더미',\n  User: {\n    id: 1,\n    nickname: 'Bum'\n  },\n  Images: [],\n  Comments: []\n};\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case ADD_POST:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        mainPosts: [dummyPost, ...state.mainPosts],\n        postAdded: true\n      });\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["C:/major/react-NodeBird/prepare/front/reducers/post.js"],"names":["initialState","mainPosts","id","User","nickname","content","Images","src","Comments","imagePaths","postAdded","ADD_POST","addPost","type","dummyPost","reducer","state","action"],"mappings":";;;;;;AACA,OAAO,MAAMA,YAAY,GAAG;AACxBC,EAAAA,SAAS,EAAE,CAAC;AACRC,IAAAA,EAAE,EAAE,CADI;AAERC,IAAAA,IAAI,EAAE;AACFD,MAAAA,EAAE,EAAE,CADF;AAEFE,MAAAA,QAAQ,EAAE;AAFR,KAFE;AAMRC,IAAAA,OAAO,EAAE,uBAND;AAORC,IAAAA,MAAM,EAAE,CACJ;AAAEC,MAAAA,GAAG,EAAE;AAAP,KADI,EAEJ;AAAEA,MAAAA,GAAG,EAAE;AAAP,KAFI,EAGJ;AAAEA,MAAAA,GAAG,EAAE;AAAP,KAHI,CAPA;AAYRC,IAAAA,QAAQ,EAAE,CAAC;AACPL,MAAAA,IAAI,EAAE;AACFC,QAAAA,QAAQ,EAAE;AADR,OADC;AAIPC,MAAAA,OAAO,EAAE;AAJF,KAAD;AAZF,GAAD,CADa;AAoBxBI,EAAAA,UAAU,EAAE,EApBY;AAoBR;AAChBC,EAAAA,SAAS,EAAE,KArBa,CAqBJ;;AArBI,CAArB;AAuBP,MAAMC,QAAQ,GAAG,UAAjB,C,CACA;;AACA,OAAO,MAAMC,OAAO,GAAC;AACjBC,EAAAA,IAAI,EAAEF;AADW,CAAd;AAGP,MAAMG,SAAS,GAAG;AACdZ,EAAAA,EAAE,EAAE,CADU;AAEdG,EAAAA,OAAO,EAAE,IAFK;AAGdF,EAAAA,IAAI,EAAE;AACFD,IAAAA,EAAE,EAAE,CADF;AAEFE,IAAAA,QAAQ,EAAE;AAFR,GAHQ;AAOdE,EAAAA,MAAM,EAAE,EAPM;AAQdE,EAAAA,QAAQ,EAAE;AARI,CAAlB;;AAUA,MAAMO,OAAO,GAAG,CAACC,KAAK,GAAEhB,YAAR,EAAsBiB,MAAtB,KAAiC;AAC7C,UAAOA,MAAM,CAACJ,IAAd;AACI,SAAKF,QAAL;AACI,6CACOK,KADP;AAEIf,QAAAA,SAAS,EAAE,CAACa,SAAD,EAAW,GAAGE,KAAK,CAACf,SAApB,CAFf;AAGIS,QAAAA,SAAS,EAAE;AAHf;;AAKJ;AACI,aAAOM,KAAP;AARR;AAUH,CAXD;;AAaA,eAAeD,OAAf","sourcesContent":["\r\nexport const initialState = {\r\n    mainPosts: [{\r\n        id: 1,\r\n        User: {\r\n            id: 1,\r\n            nickname: 'Bum'\r\n        },\r\n        content: '첫 번째 게시글 #해시태그 #익스프레스',\r\n        Images: [\r\n            { src: 'https://bookthumb-phinf.pstatic.net/cover/137/995/13799585.jpg?udate=20180726'},\r\n            { src: 'https://gimg.gilbut.co.kr/book/BN001958/rn_view_BN001958.jpg'},\r\n            { src: 'https://gimg.gilbut.co.kr/book/BN001998/rn_view_BN001998.jpg'}\r\n        ],\r\n        Comments: [{\r\n            User: {\r\n                nickname: 'nero',\r\n            },\r\n            content: '얼른 사고싶어요~',\r\n        }]\r\n    }],\r\n    imagePaths: [], //이미지 업로드할때 이미지경로들 저장할곳\r\n    postAdded: false,   //게시글 추가가 완료됬을떄 true\r\n}\r\nconst ADD_POST = 'ADD_POST';\r\n//action은 원래 객체(동적할당은 action creater 함수를 만들어서)\r\nexport const addPost={\r\n    type: ADD_POST,\r\n}\r\nconst dummyPost = {\r\n    id: 2,\r\n    content: '더미',\r\n    User: {\r\n        id: 1,\r\n        nickname: 'Bum',\r\n    },\r\n    Images: [],\r\n    Comments: [],\r\n};\r\nconst reducer = (state= initialState, action) => {\r\n    switch(action.type){\r\n        case ADD_POST:\r\n            return{\r\n                ...state,\r\n                mainPosts: [dummyPost,...state.mainPosts],\r\n                postAdded: true,\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default reducer;"]},"metadata":{},"sourceType":"module"}