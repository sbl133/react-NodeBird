{"ast":null,"code":"import { compose, createStore, applyMiddleware } from 'redux';\nimport { createWrapper } from 'next-redux-wrapper';\nimport reducer from '../reducers';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport createSagaMiddleware from 'redux-saga';\nimport rootSaga from '../sagas';\n\nconst configureStore = () => {\n  const sagaMiddleware = createSagaMiddleware();\n  const middleware = [sagaMiddleware]; //enhancer : redux기능확장\n\n  const enhancer = false ? compose(applyMiddleware(...middleware)) //보안상의 이유로 배포용일때는 devtool연결 x\n  : composeWithDevTools(applyMiddleware(...middleware)); //개발용일땐 o\n\n  const store = createStore(reducer, enhancer);\n  store.sagaTask = sagaMiddleware.run(rootSaga);\n  return store;\n};\n\nconst wrapper = createWrapper(configureStore, {\n  debug: true\n});\nexport default wrapper;","map":{"version":3,"sources":["C:/major/react-NodeBird/prepare/front/store/configureStore.js"],"names":["compose","createStore","applyMiddleware","createWrapper","reducer","composeWithDevTools","createSagaMiddleware","rootSaga","configureStore","sagaMiddleware","middleware","enhancer","store","sagaTask","run","wrapper","debug"],"mappings":"AAAA,SAAQA,OAAR,EAAiBC,WAAjB,EAA8BC,eAA9B,QAAoD,OAApD;AACA,SAAQC,aAAR,QAA4B,oBAA5B;AACA,OAAOC,OAAP,MAAoB,aAApB;AACA,SAAQC,mBAAR,QAAkC,0BAAlC;AACA,OAAOC,oBAAP,MAAiC,YAAjC;AACA,OAAOC,QAAP,MAAqB,UAArB;;AAEA,MAAMC,cAAc,GAAG,MAAM;AACzB,QAAMC,cAAc,GAAGH,oBAAoB,EAA3C;AACA,QAAMI,UAAU,GAAG,CAACD,cAAD,CAAnB,CAFyB,CAGzB;;AACA,QAAME,QAAQ,GAAG,QACXX,OAAO,CAACE,eAAe,CAAC,GAAGQ,UAAJ,CAAhB,CADI,CAEb;AAFa,IAGXL,mBAAmB,CAACH,eAAe,CAAC,GAAGQ,UAAJ,CAAhB,CAHzB,CAJyB,CAOiC;;AAC1D,QAAME,KAAK,GAAGX,WAAW,CAACG,OAAD,EAAUO,QAAV,CAAzB;AACAC,EAAAA,KAAK,CAACC,QAAN,GAAiBJ,cAAc,CAACK,GAAf,CAAmBP,QAAnB,CAAjB;AACA,SAAOK,KAAP;AACH,CAXD;;AAaA,MAAMG,OAAO,GAAGZ,aAAa,CAACK,cAAD,EAAiB;AAACQ,EAAAA,KAAK;AAAN,CAAjB,CAA7B;AACA,eAAeD,OAAf","sourcesContent":["import {compose, createStore, applyMiddleware} from 'redux';\r\nimport {createWrapper} from 'next-redux-wrapper';\r\nimport reducer from '../reducers'\r\nimport {composeWithDevTools} from 'redux-devtools-extension';\r\nimport createSagaMiddleware from 'redux-saga';\r\nimport rootSaga from '../sagas';\r\n\r\nconst configureStore = () => {\r\n    const sagaMiddleware = createSagaMiddleware();\r\n    const middleware = [sagaMiddleware];\r\n    //enhancer : redux기능확장\r\n    const enhancer = process.env.NODE_ENV === 'production'\r\n        ? compose(applyMiddleware(...middleware)) \r\n        //보안상의 이유로 배포용일때는 devtool연결 x\r\n        : composeWithDevTools(applyMiddleware(...middleware)) //개발용일땐 o\r\n    const store = createStore(reducer, enhancer);\r\n    store.sagaTask = sagaMiddleware.run(rootSaga)\r\n    return store;\r\n};\r\n\r\nconst wrapper = createWrapper(configureStore, {debug: process.env.NODE_ENV === 'development'});\r\nexport default wrapper;"]},"metadata":{},"sourceType":"module"}