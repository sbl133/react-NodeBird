{"ast":null,"code":"import { compose, createStore, applyMiddleware } from 'redux';\nimport { createWrapper } from 'next-redux-wrapper';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport createSagaMiddleware from 'redux-saga';\nimport reducer from '../reducers';\nimport rootSaga from '../sagas';\n\nvar configureStore = function configureStore() {\n  var sagaMiddleware = createSagaMiddleware();\n  var middleware = [sagaMiddleware]; // enhancer : redux기능확장\n\n  var enhancer = false ? compose(applyMiddleware.apply(void 0, middleware)) // 보안상의 이유로 배포용일때는 devtool연결 x\n  : composeWithDevTools(applyMiddleware.apply(void 0, middleware)); // 개발용일땐 o\n\n  var store = createStore(reducer, enhancer);\n  store.sagaTask = sagaMiddleware.run(rootSaga);\n  return store;\n};\n\nvar wrapper = createWrapper(configureStore, {\n  debug: true\n});\nexport default wrapper;","map":{"version":3,"sources":["C:/major/react-NodeBird/prepare/front/store/configureStore.js"],"names":["compose","createStore","applyMiddleware","createWrapper","composeWithDevTools","createSagaMiddleware","reducer","rootSaga","configureStore","sagaMiddleware","middleware","enhancer","store","sagaTask","run","wrapper","debug"],"mappings":"AAAA,SAASA,OAAT,EAAkBC,WAAlB,EAA+BC,eAA/B,QAAsD,OAAtD;AACA,SAASC,aAAT,QAA8B,oBAA9B;AACA,SAASC,mBAAT,QAAoC,0BAApC;AACA,OAAOC,oBAAP,MAAiC,YAAjC;AACA,OAAOC,OAAP,MAAoB,aAApB;AACA,OAAOC,QAAP,MAAqB,UAArB;;AAEA,IAAMC,cAAc,GAAG,SAAjBA,cAAiB,GAAM;AACzB,MAAMC,cAAc,GAAGJ,oBAAoB,EAA3C;AACA,MAAMK,UAAU,GAAG,CAACD,cAAD,CAAnB,CAFyB,CAGzB;;AACA,MAAME,QAAQ,GAAG,QACXX,OAAO,CAACE,eAAe,MAAf,SAAmBQ,UAAnB,CAAD,CADI,CAEb;AAFa,IAGXN,mBAAmB,CAACF,eAAe,MAAf,SAAmBQ,UAAnB,CAAD,CAHzB,CAJyB,CAOkC;;AAC3D,MAAME,KAAK,GAAGX,WAAW,CAACK,OAAD,EAAUK,QAAV,CAAzB;AACAC,EAAAA,KAAK,CAACC,QAAN,GAAiBJ,cAAc,CAACK,GAAf,CAAmBP,QAAnB,CAAjB;AACA,SAAOK,KAAP;AACH,CAXD;;AAaA,IAAMG,OAAO,GAAGZ,aAAa,CAACK,cAAD,EAAiB;AAAEQ,EAAAA,KAAK;AAAP,CAAjB,CAA7B;AACA,eAAeD,OAAf","sourcesContent":["import { compose, createStore, applyMiddleware } from 'redux';\r\nimport { createWrapper } from 'next-redux-wrapper';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nimport createSagaMiddleware from 'redux-saga';\r\nimport reducer from '../reducers';\r\nimport rootSaga from '../sagas';\r\n\r\nconst configureStore = () => {\r\n    const sagaMiddleware = createSagaMiddleware();\r\n    const middleware = [sagaMiddleware];\r\n    // enhancer : redux기능확장\r\n    const enhancer = process.env.NODE_ENV === 'production'\r\n        ? compose(applyMiddleware(...middleware))\r\n        // 보안상의 이유로 배포용일때는 devtool연결 x\r\n        : composeWithDevTools(applyMiddleware(...middleware)); // 개발용일땐 o\r\n    const store = createStore(reducer, enhancer);\r\n    store.sagaTask = sagaMiddleware.run(rootSaga);\r\n    return store;\r\n};\r\n\r\nconst wrapper = createWrapper(configureStore, { debug: process.env.NODE_ENV === 'development' });\r\nexport default wrapper;\r\n"]},"metadata":{},"sourceType":"module"}