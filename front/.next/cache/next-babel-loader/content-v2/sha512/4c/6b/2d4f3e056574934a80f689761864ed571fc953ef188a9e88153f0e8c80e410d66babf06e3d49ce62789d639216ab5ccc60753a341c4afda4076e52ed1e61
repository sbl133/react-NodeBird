{"ast":null,"code":"import shortId from 'shortid';\nimport produce from 'immer';\nimport faker from 'faker';\nexport var initialState = {\n  mainPosts: [{\n    id: 1,\n    User: {\n      id: 1,\n      nickname: 'Bum'\n    },\n    content: '첫 번째 게시글 #해시태그 #익스프레스',\n    Images: [{\n      id: shortId.generate(),\n      src: 'https://bookthumb-phinf.pstatic.net/cover/137/995/13799585.jpg?udate=20180726'\n    }, {\n      id: shortId.generate(),\n      src: 'https://gimg.gilbut.co.kr/book/BN001958/rn_view_BN001958.jpg'\n    }, {\n      id: shortId.generate(),\n      src: 'https://gimg.gilbut.co.kr/book/BN001998/rn_view_BN001998.jpg'\n    }],\n    Comments: [{\n      id: shortId.generate(),\n      User: {\n        id: shortId.generate(),\n        nickname: 'nero'\n      },\n      content: '얼른 사고싶어요~'\n    }, {\n      id: shortId.generate(),\n      User: {\n        id: shortId.generate(),\n        nickname: 'hero'\n      },\n      content: '잠좀 자고시퍼요~'\n    }]\n  }],\n  imagePaths: [],\n  // 이미지 업로드할때 이미지경로들 저장할곳\n  addPostLoading: false,\n  // 게시글 추가\n  addPostDone: false,\n  addPostError: null,\n  removePostLoading: false,\n  // 게시글 삭제\n  removePostDone: false,\n  removePostError: null,\n  addCommentLoading: false,\n  addCommentDone: false,\n  addCommentError: null\n};\nexport var generateDummyPost = function generateDummyPost(number) {\n  return Array(number).fill().map(function () {\n    return {\n      id: shortId.generate(),\n      User: {\n        id: shortId.generate(),\n        nickname: faker.name.findName()\n      },\n      content: faker.lorem.paragraph(),\n      Images: [{\n        src: faker.image.image()\n      }],\n      Comments: [{\n        User: {\n          id: shortId.generate(),\n          nickname: faker.name.findName()\n        },\n        content: faker.lorem.sentence()\n      }]\n    };\n  });\n};\ninitialState.mainPosts = initialState.mainPosts.concat(generateDummyPost(10));\nexport var LOAD_POST_REQUEST = 'LOAD_POST_REQUEST';\nexport var LOAD_POST_SUCCESS = 'LOAD_POST_SUCCESS';\nexport var LOAD_POST_FAILURE = 'LOAD_POST_FAILURE';\nexport var ADD_POST_REQUEST = 'ADD_POST_REQUEST';\nexport var ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\nexport var ADD_POST_FAILURE = 'ADD_POST_FAILURE';\nexport var REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\nexport var REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\nexport var REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\nexport var ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\nexport var ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\nexport var ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE'; // action은 원래 객체(동적할당은 action creater 함수를 만들어서)\n\nexport var addPost = function addPost(data) {\n  return {\n    type: ADD_POST_REQUEST,\n    data: data\n  };\n};\nexport var addComment = function addComment(data) {\n  return {\n    type: ADD_COMMENT_REQUEST,\n    data: data\n  };\n};\n\nvar dummyPost = function dummyPost(data) {\n  return {\n    id: data.id,\n    content: data.content,\n    User: {\n      id: 1,\n      nickname: 'Bum'\n    },\n    Images: [],\n    Comments: []\n  };\n};\n\nvar dummyComment = function dummyComment(data) {\n  return {\n    id: data.id,\n    content: data.content,\n    User: {\n      id: 1,\n      nickname: 'Bum'\n    }\n  };\n};\n\nvar reducer = function reducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n  return produce(state, function (draft) {\n    switch (action.type) {\n      case ADD_POST_REQUEST:\n        draft.addPostLoading = true;\n        draft.addPostDone = false;\n        draft.addPostError = null;\n        break;\n\n      case ADD_POST_SUCCESS:\n        draft.addPostLoading = false;\n        draft.addPostDone = true;\n        draft.mainPosts.unshift(dummyPost(action.data));\n        break;\n\n      case ADD_POST_FAILURE:\n        draft.addPostLoading = false;\n        draft.addPostError = action.error;\n        break;\n\n      case REMOVE_POST_REQUEST:\n        draft.removePostLoading = true;\n        draft.removePostDone = false;\n        draft.removePostError = null;\n        break;\n\n      case REMOVE_POST_SUCCESS:\n        draft.removePostLoading = false;\n        draft.removePostDone = true;\n        draft.mainPosts = draft.mainPosts.filter(function (v) {\n          return v.id !== action.data;\n        });\n        break;\n\n      case REMOVE_POST_FAILURE:\n        draft.removePostLoading = false;\n        draft.removePostError = action.error;\n        break;\n\n      case ADD_COMMENT_REQUEST:\n        draft.addCommentLoading = true;\n        draft.addCommentDone = false;\n        draft.addCommentError = null;\n        break;\n\n      case ADD_COMMENT_SUCCESS:\n        {\n          var post = draft.mainPosts.find(function (v) {\n            return v.id === action.data.postId;\n          });\n          post.Comments.unshift(dummyComment(action.data));\n          draft.addCommentLoading = false;\n          draft.addCommentDone = true;\n          break; // const postIndex = state.mainPosts.findIndex((v) => v.id === action.data.postId);\n          // const post = { ...state.mainPosts[postIndex] };\n          // post.Comments = [dummyComment(action.data), ...post.Comments];\n          // const mainPosts = [...state.mainPosts];\n          // mainPosts[postIndex] = post;\n          // return {\n          //     ...state,\n          //     mainPosts,\n          //     addCommentLoading: false,\n          //     addCommentDone: true,\n          // };\n        }\n\n      case ADD_COMMENT_FAILURE:\n        draft.addCommentLoading = false;\n        draft.addCommentError = true;\n        break;\n\n      default:\n        break;\n    }\n  });\n};\n\nexport default reducer;","map":{"version":3,"sources":["C:/major/react-NodeBird/prepare/front/reducers/post.js"],"names":["shortId","produce","faker","initialState","mainPosts","id","User","nickname","content","Images","generate","src","Comments","imagePaths","addPostLoading","addPostDone","addPostError","removePostLoading","removePostDone","removePostError","addCommentLoading","addCommentDone","addCommentError","generateDummyPost","number","Array","fill","map","name","findName","lorem","paragraph","image","sentence","concat","LOAD_POST_REQUEST","LOAD_POST_SUCCESS","LOAD_POST_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","addPost","data","type","addComment","dummyPost","dummyComment","reducer","state","action","draft","unshift","error","filter","v","post","find","postId"],"mappings":"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","sourcesContent":["import shortId from 'shortid';\r\nimport produce from 'immer';\r\nimport faker from 'faker';\r\n\r\nexport const initialState = {\r\n    mainPosts: [{\r\n        id: 1,\r\n        User: {\r\n            id: 1,\r\n            nickname: 'Bum',\r\n        },\r\n        content: '첫 번째 게시글 #해시태그 #익스프레스',\r\n        Images: [\r\n            { id: shortId.generate(),\r\n                src: 'https://bookthumb-phinf.pstatic.net/cover/137/995/13799585.jpg?udate=20180726' },\r\n            { id: shortId.generate(),\r\n                src: 'https://gimg.gilbut.co.kr/book/BN001958/rn_view_BN001958.jpg' },\r\n            { id: shortId.generate(),\r\n                src: 'https://gimg.gilbut.co.kr/book/BN001998/rn_view_BN001998.jpg' },\r\n        ],\r\n        Comments: [{\r\n            id: shortId.generate(),\r\n            User: {\r\n                id: shortId.generate(),\r\n                nickname: 'nero',\r\n            },\r\n            content: '얼른 사고싶어요~',\r\n        }, {\r\n            id: shortId.generate(),\r\n            User: {\r\n                id: shortId.generate(),\r\n                nickname: 'hero',\r\n            },\r\n            content: '잠좀 자고시퍼요~',\r\n        }],\r\n    }],\r\n    imagePaths: [], // 이미지 업로드할때 이미지경로들 저장할곳\r\n    addPostLoading: false, // 게시글 추가\r\n    addPostDone: false,\r\n    addPostError: null,\r\n    removePostLoading: false, // 게시글 삭제\r\n    removePostDone: false,\r\n    removePostError: null,\r\n    addCommentLoading: false,\r\n    addCommentDone: false,\r\n    addCommentError: null,\r\n};\r\n\r\nexport const generateDummyPost = (number) => Array(number).fill().map(() => ({\r\n    id: shortId.generate(),\r\n    User: {\r\n        id: shortId.generate(),\r\n        nickname: faker.name.findName(),\r\n    },\r\n    content: faker.lorem.paragraph(),\r\n    Images: [{\r\n        src: faker.image.image(),\r\n    }],\r\n    Comments: [{\r\n        User: {\r\n            id: shortId.generate(),\r\n            nickname: faker.name.findName(),\r\n        },\r\n        content: faker.lorem.sentence(),\r\n    }],\r\n}));\r\ninitialState.mainPosts = initialState.mainPosts.concat(generateDummyPost(10));\r\nexport const LOAD_POST_REQUEST = 'LOAD_POST_REQUEST';\r\nexport const LOAD_POST_SUCCESS = 'LOAD_POST_SUCCESS';\r\nexport const LOAD_POST_FAILURE = 'LOAD_POST_FAILURE';\r\n\r\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST';\r\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\r\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE';\r\n\r\nexport const REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\r\nexport const REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\r\nexport const REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\r\n\r\nexport const ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\r\nexport const ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\r\nexport const ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\r\n\r\n// action은 원래 객체(동적할당은 action creater 함수를 만들어서)\r\nexport const addPost = (data) => ({\r\n    type: ADD_POST_REQUEST,\r\n    data,\r\n});\r\nexport const addComment = (data) => ({\r\n    type: ADD_COMMENT_REQUEST,\r\n    data,\r\n});\r\nconst dummyPost = (data) => ({\r\n    id: data.id,\r\n    content: data.content,\r\n    User: {\r\n        id: 1,\r\n        nickname: 'Bum',\r\n    },\r\n    Images: [],\r\n    Comments: [],\r\n});\r\n\r\nconst dummyComment = (data) => ({\r\n    id: data.id,\r\n    content: data.content,\r\n    User: {\r\n        id: 1,\r\n        nickname: 'Bum',\r\n    },\r\n});\r\nconst reducer = (state = initialState, action) => produce(state, (draft) => {\r\n    switch (action.type) {\r\n        case ADD_POST_REQUEST:\r\n            draft.addPostLoading = true;\r\n            draft.addPostDone = false;\r\n            draft.addPostError = null;\r\n            break;\r\n        case ADD_POST_SUCCESS:\r\n            draft.addPostLoading = false;\r\n            draft.addPostDone = true;\r\n            draft.mainPosts.unshift(dummyPost(action.data));\r\n            break;\r\n        case ADD_POST_FAILURE:\r\n            draft.addPostLoading = false;\r\n            draft.addPostError = action.error;\r\n            break;\r\n        case REMOVE_POST_REQUEST:\r\n            draft.removePostLoading = true;\r\n            draft.removePostDone = false;\r\n            draft.removePostError = null;\r\n            break;\r\n        case REMOVE_POST_SUCCESS:\r\n            draft.removePostLoading = false;\r\n            draft.removePostDone = true;\r\n            draft.mainPosts = draft.mainPosts.filter((v) => v.id !== action.data);\r\n            break;\r\n        case REMOVE_POST_FAILURE:\r\n            draft.removePostLoading = false;\r\n            draft.removePostError = action.error;\r\n            break;\r\n        case ADD_COMMENT_REQUEST:\r\n            draft.addCommentLoading = true;\r\n            draft.addCommentDone = false;\r\n            draft.addCommentError = null;\r\n            break;\r\n        case ADD_COMMENT_SUCCESS: {\r\n            const post = draft.mainPosts.find((v) => v.id === action.data.postId);\r\n            post.Comments.unshift(dummyComment(action.data));\r\n            draft.addCommentLoading = false;\r\n            draft.addCommentDone = true;\r\n            break;\r\n            // const postIndex = state.mainPosts.findIndex((v) => v.id === action.data.postId);\r\n            // const post = { ...state.mainPosts[postIndex] };\r\n            // post.Comments = [dummyComment(action.data), ...post.Comments];\r\n            // const mainPosts = [...state.mainPosts];\r\n            // mainPosts[postIndex] = post;\r\n            // return {\r\n            //     ...state,\r\n            //     mainPosts,\r\n            //     addCommentLoading: false,\r\n            //     addCommentDone: true,\r\n            // };\r\n        }\r\n        case ADD_COMMENT_FAILURE:\r\n            draft.addCommentLoading = false;\r\n            draft.addCommentError = true;\r\n            break;\r\n        default:\r\n            break;\r\n    }\r\n});\r\n\r\nexport default reducer;\r\n"]},"metadata":{},"sourceType":"module"}