{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\major\\\\react-NodeBird\\\\prepare\\\\front\\\\pages\\\\index.js\";\nimport React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { END } from 'redux-saga';\nimport axios from 'axios';\nimport AppLayout from '../components/AppLayout';\nimport PostForm from '../components/PostForm';\nimport PostCard from '../components/PostCard';\nimport { LOAD_POSTS_REQUEST } from '../reducers/post';\nimport { LOAD_MY_INFO_REQUEST } from '../reducers/user';\nimport wrapper from '../store/configureStore';\n\nconst Home = () => {\n  const dispatch = useDispatch();\n  const {\n    me\n  } = useSelector(state => state.user);\n  const {\n    mainPosts,\n    hasMorePosts,\n    loadPostsLoading,\n    retweetError\n  } = useSelector(state => state.post);\n  useEffect(() => {\n    if (retweetError) {\n      alert(retweetError);\n    }\n  }, [retweetError]);\n  useEffect(() => {\n    function onScroll() {\n      // scrollY : 현재위치 clientHeight : 현재화면길이 scrollHeight : 스크롤총길이\n      // (끝까지내린)scrollY + clientHeight = scrollHeight\n      if (window.scrollY + document.documentElement.clientHeight > document.documentElement.scrollHeight - 300) {\n        var _mainPosts;\n\n        const lastId = (_mainPosts = mainPosts[mainPosts.length - 1]) === null || _mainPosts === void 0 ? void 0 : _mainPosts.id;\n\n        if (hasMorePosts && !loadPostsLoading) {\n          dispatch({\n            type: LOAD_POSTS_REQUEST,\n            lastId\n          });\n        }\n      }\n    }\n\n    window.addEventListener('scroll', onScroll);\n    return () => {\n      window.removeEventListener('scroll', onScroll);\n    };\n  }, [hasMorePosts, loadPostsLoading, mainPosts]);\n  return /*#__PURE__*/_jsxDEV(AppLayout, {\n    children: [me && /*#__PURE__*/_jsxDEV(PostForm, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 20\n    }, this), mainPosts.map(post => /*#__PURE__*/_jsxDEV(PostCard, {\n      post: post\n    }, post.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 38\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 9\n  }, this);\n}; // context안에 store가 들어있음\n\n\nexport const getServerSideProps = wrapper.getServerSideProps(async context => {\n  const cookie = context.req ? context.req.headers.cookie : '';\n  axios.defaults.headers.Cookie = '';\n\n  if (context.req && cookie) {\n    // 쿠키공유차단\n    axios.defaults.headers.Cookie = cookie; // 서버로 쿠키전달\n  }\n\n  context.store.dispatch({\n    type: LOAD_MY_INFO_REQUEST\n  });\n  context.store.dispatch({\n    type: LOAD_POSTS_REQUEST\n  });\n  context.store.dispatch(END);\n  await context.store.sagaTask.toPromise();\n});\nexport default Home;","map":{"version":3,"sources":["C:/major/react-NodeBird/prepare/front/pages/index.js"],"names":["React","useEffect","useDispatch","useSelector","END","axios","AppLayout","PostForm","PostCard","LOAD_POSTS_REQUEST","LOAD_MY_INFO_REQUEST","wrapper","Home","dispatch","me","state","user","mainPosts","hasMorePosts","loadPostsLoading","retweetError","post","alert","onScroll","window","scrollY","document","documentElement","clientHeight","scrollHeight","lastId","length","id","type","addEventListener","removeEventListener","map","getServerSideProps","context","cookie","req","headers","defaults","Cookie","store","sagaTask","toPromise"],"mappings":"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","sourcesContent":["import React, { useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { END } from 'redux-saga';\r\nimport axios from 'axios';\r\nimport AppLayout from '../components/AppLayout';\r\nimport PostForm from '../components/PostForm';\r\nimport PostCard from '../components/PostCard';\r\nimport { LOAD_POSTS_REQUEST } from '../reducers/post';\r\nimport { LOAD_MY_INFO_REQUEST } from '../reducers/user';\r\nimport wrapper from '../store/configureStore';\r\n\r\nconst Home = () => {\r\n    const dispatch = useDispatch();\r\n    const { me } = useSelector((state) => state.user);\r\n    const { mainPosts, hasMorePosts, loadPostsLoading, retweetError,\r\n        } = useSelector((state) => state.post);\r\n\r\n    useEffect(() => {\r\n        if (retweetError) {\r\n            alert(retweetError);\r\n        }\r\n    }, [retweetError]);\r\n    useEffect(() => {\r\n        function onScroll() {\r\n            // scrollY : 현재위치 clientHeight : 현재화면길이 scrollHeight : 스크롤총길이\r\n            // (끝까지내린)scrollY + clientHeight = scrollHeight\r\n            if (window.scrollY + document.documentElement.clientHeight >\r\n                document.documentElement.scrollHeight - 300) {\r\n                    const lastId = mainPosts[mainPosts.length - 1]?.id;\r\n                if (hasMorePosts && !loadPostsLoading) {\r\n                    dispatch({\r\n                        type: LOAD_POSTS_REQUEST,\r\n                        lastId,\r\n                    });\r\n                }\r\n            }\r\n        }\r\n        window.addEventListener('scroll', onScroll);\r\n        return () => {\r\n            window.removeEventListener('scroll', onScroll);\r\n        };\r\n    }, [hasMorePosts, loadPostsLoading, mainPosts]);\r\n    return (\r\n        <AppLayout>\r\n            {me && <PostForm />}\r\n            {mainPosts.map((post) => <PostCard key={post.id} post={post} />)}\r\n        </AppLayout>\r\n    );\r\n};\r\n// context안에 store가 들어있음\r\nexport const getServerSideProps = wrapper.getServerSideProps(async (context) => {\r\n    const cookie = context.req ? context.req.headers.cookie : '';\r\n    axios.defaults.headers.Cookie = '';\r\n    if (context.req && cookie) { // 쿠키공유차단\r\n        axios.defaults.headers.Cookie = cookie; // 서버로 쿠키전달\r\n    }\r\n    context.store.dispatch({\r\n        type: LOAD_MY_INFO_REQUEST,\r\n    });\r\n    context.store.dispatch({\r\n        type: LOAD_POSTS_REQUEST,\r\n    });\r\n    context.store.dispatch(END);\r\n    await context.store.sagaTask.toPromise();\r\n});\r\n\r\nexport default Home;\r\n"]},"metadata":{},"sourceType":"module"}