{"ast":null,"code":"import axios from 'axios';\nimport { all, delay, fork, put, takeLatest } from 'redux-saga/effects';\nimport shortid from 'shortid'; // all: 안에있는effects동시실행 fork: 비동기함수호출 call: 동기함수호출 put: dispatch\n// take: 기다린다(동기) takeEvery: 기다린다.(비동기)\n\nimport { ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE, REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS, REMOVE_POST_FAILURE } from '../reducers/post';\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from '../reducers/user';\n\nfunction addPostAPI(data) {\n  return axios.post('/api/post', data);\n}\n\nfunction* addPost(action) {\n  try {\n    yield delay(1000);\n    const id = shortid.generate();\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: {\n        id,\n        content: action.data\n      }\n    });\n    yield put({\n      type: ADD_POST_TO_ME,\n      data: id\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction removePostAPI(data) {\n  return axios.delete('/api/post', data);\n}\n\nfunction* removePost(action) {\n  try {\n    yield delay(1000);\n    yield put({\n      type: REMOVE_POST_SUCCESS,\n      data: action.data\n    });\n    yield put({\n      type: REMOVE_POST_OF_ME,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: REMOVE_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction addCommentAPI(data) {\n  return axios.post(`/api/post/${data.id}/comment`, data);\n}\n\nfunction* addComment(action) {\n  try {\n    yield delay(1000);\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\nfunction* watchRemovePost() {\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\n}\n\nexport default function* postSaga() {\n  yield all([fork(watchAddPost), fork(watchAddComment), fork(watchRemovePost)]);\n}","map":{"version":3,"sources":["C:/major/react-NodeBird/prepare/front/sagas/post.js"],"names":["axios","all","delay","fork","put","takeLatest","shortid","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","ADD_POST_TO_ME","REMOVE_POST_OF_ME","addPostAPI","data","post","addPost","action","id","generate","type","content","err","response","removePostAPI","delete","removePost","addCommentAPI","addComment","watchAddComment","watchAddPost","watchRemovePost","postSaga"],"mappings":"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","sourcesContent":["import axios from 'axios';\r\nimport { all, delay, fork, put, takeLatest } from 'redux-saga/effects';\r\nimport shortid from 'shortid';\r\n// all: 안에있는effects동시실행 fork: 비동기함수호출 call: 동기함수호출 put: dispatch\r\n// take: 기다린다(동기) takeEvery: 기다린다.(비동기)\r\n\r\nimport {\r\n    ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE,\r\n    ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE,\r\n    REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS, REMOVE_POST_FAILURE,\r\n} from '../reducers/post';\r\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from '../reducers/user';\r\n\r\nfunction addPostAPI(data) {\r\n    return axios.post('/api/post', data);\r\n}\r\nfunction* addPost(action) {\r\n    try {\r\n        yield delay(1000);\r\n        const id = shortid.generate();\r\n        yield put({\r\n            type: ADD_POST_SUCCESS,\r\n            data: {\r\n                id,\r\n                content: action.data,\r\n            },\r\n        });\r\n        yield put({\r\n            type: ADD_POST_TO_ME,\r\n            data: id,\r\n        });\r\n    } catch (err) {\r\n        yield put({\r\n            type: ADD_POST_FAILURE,\r\n            data: err.response.data,\r\n        });\r\n    }\r\n}\r\nfunction removePostAPI(data) {\r\n    return axios.delete('/api/post', data);\r\n}\r\nfunction* removePost(action) {\r\n    try {\r\n        yield delay(1000);\r\n        yield put({\r\n            type: REMOVE_POST_SUCCESS,\r\n            data: action.data,\r\n        });\r\n        yield put({\r\n            type: REMOVE_POST_OF_ME,\r\n            data: action.data,\r\n        });\r\n    } catch (err) {\r\n        yield put({\r\n            type: REMOVE_POST_FAILURE,\r\n            data: err.response.data,\r\n        });\r\n    }\r\n}\r\nfunction addCommentAPI(data) {\r\n    return axios.post(`/api/post/${data.id}/comment`, data);\r\n}\r\nfunction* addComment(action) {\r\n    try {\r\n        yield delay(1000);\r\n        yield put({\r\n            type: ADD_COMMENT_SUCCESS,\r\n            data: action.data,\r\n        });\r\n    } catch (err) {\r\n        yield put({\r\n            type: ADD_COMMENT_FAILURE,\r\n            data: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction* watchAddComment() {\r\n    yield takeLatest(ADD_COMMENT_REQUEST, addComment);\r\n}\r\nfunction* watchAddPost() {\r\n    yield takeLatest(ADD_POST_REQUEST, addPost);\r\n}\r\nfunction* watchRemovePost() {\r\n    yield takeLatest(REMOVE_POST_REQUEST, removePost);\r\n}\r\nexport default function* postSaga() {\r\n    yield all([\r\n        fork(watchAddPost),\r\n        fork(watchAddComment),\r\n        fork(watchRemovePost),\r\n    ]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}