{"ast":null,"code":"import axios from 'axios';\nimport { all, call, fork, put, takeLatest, throttle } from 'redux-saga/effects'; // all: 안에있는effects동시실행 fork: 비동기함수호출 call: 동기함수호출 put: dispatch\n// take: 기다린다(동기) takeEvery: 기다린다.(비동기)\n// throttle 인자밀리초안에 한번만 take\n\nimport { ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE, REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS, REMOVE_POST_FAILURE, LOAD_POSTS_REQUEST, LOAD_POSTS_SUCCESS, LOAD_POSTS_FAILURE, LIKE_POST_REQUEST, LIKE_POST_SUCCESS, LIKE_POST_FAILURE, UNLIKE_POST_REQUEST, UNLIKE_POST_SUCCESS, UNLIKE_POST_FAILURE, UPLOAD_IMAGES_REQUEST, UPLOAD_IMAGES_SUCCESS, UPLOAD_IMAGES_FAILURE, RETWEET_REQUEST, RETWEET_SUCCESS, RETWEET_FAILURE, LOAD_POST_REQUEST, LOAD_POST_SUCCESS, LOAD_POST_FAILURE } from '../reducers/post';\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from '../reducers/user';\n\nfunction retweetAPI(data) {\n  return axios.post(`/post/${data}/retweet`); // FormData그대로 back에 전달\n}\n\nfunction* retweet(action) {\n  try {\n    const result = yield call(retweetAPI, action.data);\n    yield put({\n      type: RETWEET_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    yield put({\n      type: RETWEET_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction uploadImagesAPI(data) {\n  return axios.post('/post/images', data); // FormData그대로 back에 전달\n}\n\nfunction* uploadImages(action) {\n  try {\n    const result = yield call(uploadImagesAPI, action.data);\n    yield put({\n      type: UPLOAD_IMAGES_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    yield put({\n      type: UPLOAD_IMAGES_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction likePostAPI(data) {\n  return axios.patch(`/post/${data}/like`);\n}\n\nfunction* likePost(action) {\n  try {\n    const result = yield call(likePostAPI, action.data);\n    yield put({\n      type: LIKE_POST_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    yield put({\n      type: LIKE_POST_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction unlikePostAPI(data) {\n  return axios.delete(`/post/${data}/like`);\n}\n\nfunction* unlikePost(action) {\n  try {\n    const result = yield call(unlikePostAPI, action.data);\n    yield put({\n      type: UNLIKE_POST_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    yield put({\n      type: UNLIKE_POST_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction loadPostAPI(data) {\n  return axios.get(`/post/${data}`);\n}\n\nfunction* loadPost(action) {\n  try {\n    const result = yield call(loadPostAPI, action.data);\n    yield put({\n      type: LOAD_POST_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.log(err);\n    yield put({\n      type: LOAD_POST_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction loadPostsAPI(lastId) {\n  return axios.get(`/posts?lastId=${lastId || 0}`); // 쿼리스트링 ?키=값\n  // get의 두번쨰인자는 withCredentials자리\n}\n\nfunction* loadPosts(action) {\n  try {\n    const result = yield call(loadPostsAPI, action.lastId);\n    yield put({\n      type: LOAD_POSTS_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    yield put({\n      type: LOAD_POSTS_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction addPostAPI(data) {\n  return axios.post('/post', data);\n}\n\nfunction* addPost(action) {\n  try {\n    const result = yield call(addPostAPI, action.data);\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: result.data\n    });\n    yield put({\n      type: ADD_POST_TO_ME,\n      data: result.data.id\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_POST_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction removePostAPI(data) {\n  return axios.delete(`post/${data}`); // delete는 data못넣요\n}\n\nfunction* removePost(action) {\n  try {\n    const result = yield call(removePostAPI, action.data);\n    yield put({\n      type: REMOVE_POST_SUCCESS,\n      data: result.data\n    });\n    yield put({\n      type: REMOVE_POST_OF_ME,\n      data: result.data\n    });\n  } catch (err) {\n    yield put({\n      type: REMOVE_POST_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction addCommentAPI(data) {\n  return axios.post(`/post/${data.postId}/comment`, data);\n}\n\nfunction* addComment(action) {\n  try {\n    const result = yield call(addCommentAPI, action.data);\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\nfunction* watchRemovePost() {\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\n}\n\nfunction* watchLoadPosts() {\n  yield throttle(5000, LOAD_POSTS_REQUEST, loadPosts);\n}\n\nfunction* watchLoadPost() {\n  yield takeLatest(LOAD_POST_REQUEST, loadPost);\n}\n\nfunction* watchLikePost() {\n  yield takeLatest(LIKE_POST_REQUEST, likePost);\n}\n\nfunction* watchUnlikePost() {\n  yield takeLatest(UNLIKE_POST_REQUEST, unlikePost);\n}\n\nfunction* watchUploadImages() {\n  yield takeLatest(UPLOAD_IMAGES_REQUEST, uploadImages);\n}\n\nfunction* watchRetweet() {\n  yield takeLatest(RETWEET_REQUEST, retweet);\n}\n\nexport default function* postSaga() {\n  yield all([fork(watchRetweet), fork(watchUploadImages), fork(watchAddPost), fork(watchLoadPost), fork(watchLoadPosts), fork(watchAddComment), fork(watchRemovePost), fork(watchLikePost), fork(watchUnlikePost)]);\n}","map":{"version":3,"sources":["C:/major/react-NodeBird/prepare/front/sagas/post.js"],"names":["axios","all","call","fork","put","takeLatest","throttle","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","LOAD_POSTS_FAILURE","LIKE_POST_REQUEST","LIKE_POST_SUCCESS","LIKE_POST_FAILURE","UNLIKE_POST_REQUEST","UNLIKE_POST_SUCCESS","UNLIKE_POST_FAILURE","UPLOAD_IMAGES_REQUEST","UPLOAD_IMAGES_SUCCESS","UPLOAD_IMAGES_FAILURE","RETWEET_REQUEST","RETWEET_SUCCESS","RETWEET_FAILURE","LOAD_POST_REQUEST","LOAD_POST_SUCCESS","LOAD_POST_FAILURE","ADD_POST_TO_ME","REMOVE_POST_OF_ME","retweetAPI","data","post","retweet","action","result","type","err","error","response","uploadImagesAPI","uploadImages","likePostAPI","patch","likePost","unlikePostAPI","delete","unlikePost","loadPostAPI","get","loadPost","console","log","loadPostsAPI","lastId","loadPosts","addPostAPI","addPost","id","removePostAPI","removePost","addCommentAPI","postId","addComment","watchAddComment","watchAddPost","watchRemovePost","watchLoadPosts","watchLoadPost","watchLikePost","watchUnlikePost","watchUploadImages","watchRetweet","postSaga"],"mappings":"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","sourcesContent":["import axios from 'axios';\r\nimport { all, call, fork, put, takeLatest, throttle } from 'redux-saga/effects';\r\n// all: 안에있는effects동시실행 fork: 비동기함수호출 call: 동기함수호출 put: dispatch\r\n// take: 기다린다(동기) takeEvery: 기다린다.(비동기)\r\n// throttle 인자밀리초안에 한번만 take\r\nimport {\r\n    ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE,\r\n    ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE,\r\n    REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS, REMOVE_POST_FAILURE,\r\n    LOAD_POSTS_REQUEST, LOAD_POSTS_SUCCESS, LOAD_POSTS_FAILURE,\r\n    LIKE_POST_REQUEST, LIKE_POST_SUCCESS, LIKE_POST_FAILURE,\r\n    UNLIKE_POST_REQUEST, UNLIKE_POST_SUCCESS, UNLIKE_POST_FAILURE,\r\n    UPLOAD_IMAGES_REQUEST, UPLOAD_IMAGES_SUCCESS, UPLOAD_IMAGES_FAILURE,\r\n    RETWEET_REQUEST, RETWEET_SUCCESS, RETWEET_FAILURE,\r\n    LOAD_POST_REQUEST, LOAD_POST_SUCCESS, LOAD_POST_FAILURE,\r\n} from '../reducers/post';\r\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from '../reducers/user';\r\n\r\nfunction retweetAPI(data) {\r\n    return axios.post(`/post/${data}/retweet`);// FormData그대로 back에 전달\r\n}\r\nfunction* retweet(action) {\r\n    try {\r\n        const result = yield call(retweetAPI, action.data);\r\n        yield put({\r\n            type: RETWEET_SUCCESS,\r\n            data: result.data,\r\n        });\r\n    } catch (err) {\r\n        yield put({\r\n            type: RETWEET_FAILURE,\r\n            error: err.response.data,\r\n        });\r\n    }\r\n}\r\nfunction uploadImagesAPI(data) {\r\n    return axios.post('/post/images', data);// FormData그대로 back에 전달\r\n}\r\nfunction* uploadImages(action) {\r\n    try {\r\n        const result = yield call(uploadImagesAPI, action.data);\r\n        yield put({\r\n            type: UPLOAD_IMAGES_SUCCESS,\r\n            data: result.data,\r\n        });\r\n    } catch (err) {\r\n        yield put({\r\n            type: UPLOAD_IMAGES_FAILURE,\r\n            error: err.response.data,\r\n        });\r\n    }\r\n}\r\nfunction likePostAPI(data) {\r\n    return axios.patch(`/post/${data}/like`);\r\n}\r\nfunction* likePost(action) {\r\n    try {\r\n        const result = yield call(likePostAPI, action.data);\r\n        yield put({\r\n            type: LIKE_POST_SUCCESS,\r\n            data: result.data,\r\n        });\r\n    } catch (err) {\r\n        yield put({\r\n            type: LIKE_POST_FAILURE,\r\n            error: err.response.data,\r\n        });\r\n    }\r\n}\r\nfunction unlikePostAPI(data) {\r\n    return axios.delete(`/post/${data}/like`);\r\n}\r\nfunction* unlikePost(action) {\r\n    try {\r\n        const result = yield call(unlikePostAPI, action.data);\r\n        yield put({\r\n            type: UNLIKE_POST_SUCCESS,\r\n            data: result.data,\r\n        });\r\n    } catch (err) {\r\n        yield put({\r\n            type: UNLIKE_POST_FAILURE,\r\n            error: err.response.data,\r\n        });\r\n    }\r\n}\r\nfunction loadPostAPI(data) {\r\n    return axios.get(`/post/${data}`);\r\n}\r\nfunction* loadPost(action) {\r\n    try {\r\n        const result = yield call(loadPostAPI, action.data);\r\n        yield put({\r\n            type: LOAD_POST_SUCCESS,\r\n            data: result.data,\r\n        });\r\n    } catch (err) {\r\n        console.log(err);\r\n        yield put({\r\n            type: LOAD_POST_FAILURE,\r\n            error: err.response.data,\r\n        });\r\n    }\r\n}\r\nfunction loadPostsAPI(lastId) {\r\n    return axios.get(`/posts?lastId=${lastId || 0}`);// 쿼리스트링 ?키=값\r\n    // get의 두번쨰인자는 withCredentials자리\r\n}\r\nfunction* loadPosts(action) {\r\n    try {\r\n        const result = yield call(loadPostsAPI, action.lastId);\r\n        yield put({\r\n            type: LOAD_POSTS_SUCCESS,\r\n            data: result.data,\r\n        });\r\n    } catch (err) {\r\n        yield put({\r\n            type: LOAD_POSTS_FAILURE,\r\n            error: err.response.data,\r\n        });\r\n    }\r\n}\r\nfunction addPostAPI(data) {\r\n    return axios.post('/post', data);\r\n}\r\nfunction* addPost(action) {\r\n    try {\r\n        const result = yield call(addPostAPI, action.data);\r\n        yield put({\r\n            type: ADD_POST_SUCCESS,\r\n            data: result.data,\r\n        });\r\n        yield put({\r\n            type: ADD_POST_TO_ME,\r\n            data: result.data.id,\r\n        });\r\n    } catch (err) {\r\n        yield put({\r\n            type: ADD_POST_FAILURE,\r\n            error: err.response.data,\r\n        });\r\n    }\r\n}\r\nfunction removePostAPI(data) {\r\n    return axios.delete(`post/${data}`); // delete는 data못넣요\r\n}\r\nfunction* removePost(action) {\r\n    try {\r\n        const result = yield call(removePostAPI, action.data);\r\n        yield put({\r\n            type: REMOVE_POST_SUCCESS,\r\n            data: result.data,\r\n        });\r\n        yield put({\r\n            type: REMOVE_POST_OF_ME,\r\n            data: result.data,\r\n        });\r\n    } catch (err) {\r\n        yield put({\r\n            type: REMOVE_POST_FAILURE,\r\n            error: err.response.data,\r\n        });\r\n    }\r\n}\r\nfunction addCommentAPI(data) {\r\n    return axios.post(`/post/${data.postId}/comment`, data);\r\n}\r\nfunction* addComment(action) {\r\n    try {\r\n        const result = yield call(addCommentAPI, action.data);\r\n        yield put({\r\n            type: ADD_COMMENT_SUCCESS,\r\n            data: result.data,\r\n        });\r\n    } catch (err) {\r\n        console.error(err);\r\n        yield put({\r\n            type: ADD_COMMENT_FAILURE,\r\n            error: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction* watchAddComment() {\r\n    yield takeLatest(ADD_COMMENT_REQUEST, addComment);\r\n}\r\nfunction* watchAddPost() {\r\n    yield takeLatest(ADD_POST_REQUEST, addPost);\r\n}\r\nfunction* watchRemovePost() {\r\n    yield takeLatest(REMOVE_POST_REQUEST, removePost);\r\n}\r\nfunction* watchLoadPosts() {\r\n    yield throttle(5000, LOAD_POSTS_REQUEST, loadPosts);\r\n}\r\nfunction* watchLoadPost() {\r\n    yield takeLatest(LOAD_POST_REQUEST, loadPost);\r\n}\r\nfunction* watchLikePost() {\r\n    yield takeLatest(LIKE_POST_REQUEST, likePost);\r\n}\r\nfunction* watchUnlikePost() {\r\n    yield takeLatest(UNLIKE_POST_REQUEST, unlikePost);\r\n}\r\nfunction* watchUploadImages() {\r\n    yield takeLatest(UPLOAD_IMAGES_REQUEST, uploadImages);\r\n}\r\nfunction* watchRetweet() {\r\n    yield takeLatest(RETWEET_REQUEST, retweet);\r\n}\r\nexport default function* postSaga() {\r\n    yield all([\r\n        fork(watchRetweet),\r\n        fork(watchUploadImages),\r\n        fork(watchAddPost),\r\n        fork(watchLoadPost),\r\n        fork(watchLoadPosts),\r\n        fork(watchAddComment),\r\n        fork(watchRemovePost),\r\n        fork(watchLikePost),\r\n        fork(watchUnlikePost),\r\n    ]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}