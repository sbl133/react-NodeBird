{"ast":null,"code":"import axios from \"axios\";\nimport { all, delay, fork, put, takeLatest } from \"redux-saga/effects\"; //all: 안에있는effects동시실행 fork: 비동기함수호출 call: 동기함수호출 put: dispatch\n//take: 기다린다(동기) takeEvery: 기다린다.(비동기)\n\nfunction addPostAPI(data) {\n  return axios.post('/api/post', data);\n}\n\nfunction* addPost(action) {\n  try {\n    yield delay(1000);\n    yield put({\n      type: 'ADD_POST_SUCCESS'\n    });\n  } catch (err) {\n    yield put({\n      type: 'ADD_POST_FAULURE',\n      data: err.response.data\n    });\n  }\n}\n\nfunction* watchAddPost() {\n  yield takeLatest('ADD_POST_REQUEST', addPost);\n}\n\nexport default function* postSaga() {\n  yield all([fork(watchAddPost)]);\n}","map":{"version":3,"sources":["C:/major/react-NodeBird/prepare/front/sagas/post.js"],"names":["axios","all","delay","fork","put","takeLatest","addPostAPI","data","post","addPost","action","type","err","response","watchAddPost","postSaga"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,GAAT,EAAcC,KAAd,EAAqBC,IAArB,EAA2BC,GAA3B,EAAgCC,UAAhC,QAAkD,oBAAlD,C,CACA;AACA;;AAEA,SAASC,UAAT,CAAoBC,IAApB,EAAyB;AACrB,SAAOP,KAAK,CAACQ,IAAN,CAAW,WAAX,EAAwBD,IAAxB,CAAP;AACH;;AACD,UAAUE,OAAV,CAAkBC,MAAlB,EAAyB;AACrB,MAAG;AACC,UAAMR,KAAK,CAAC,IAAD,CAAX;AACA,UAAME,GAAG,CAAC;AACNO,MAAAA,IAAI,EAAE;AADA,KAAD,CAAT;AAGH,GALD,CAKE,OAAMC,GAAN,EAAU;AACR,UAAMR,GAAG,CAAC;AACNO,MAAAA,IAAI,EAAE,kBADA;AAENJ,MAAAA,IAAI,EAAEK,GAAG,CAACC,QAAJ,CAAaN;AAFb,KAAD,CAAT;AAIH;AACJ;;AACD,UAAUO,YAAV,GAAyB;AACrB,QAAMT,UAAU,CAAC,kBAAD,EAAqBI,OAArB,CAAhB;AACH;;AACD,eAAe,UAAUM,QAAV,GAAoB;AAC/B,QAAMd,GAAG,CAAC,CACNE,IAAI,CAACW,YAAD,CADE,CAAD,CAAT;AAGH","sourcesContent":["import axios from \"axios\";\r\nimport { all, delay, fork, put, takeLatest } from \"redux-saga/effects\";\r\n//all: 안에있는effects동시실행 fork: 비동기함수호출 call: 동기함수호출 put: dispatch\r\n//take: 기다린다(동기) takeEvery: 기다린다.(비동기)\r\n\r\nfunction addPostAPI(data){\r\n    return axios.post('/api/post', data)\r\n}\r\nfunction* addPost(action){\r\n    try{\r\n        yield delay(1000);\r\n        yield put({\r\n            type: 'ADD_POST_SUCCESS',\r\n        }) \r\n    } catch(err){\r\n        yield put({\r\n            type: 'ADD_POST_FAULURE',\r\n            data: err.response.data,\r\n        })\r\n    }\r\n}\r\nfunction* watchAddPost() {\r\n    yield takeLatest('ADD_POST_REQUEST', addPost);\r\n}\r\nexport default function* postSaga(){\r\n    yield all([\r\n        fork(watchAddPost),\r\n    ])\r\n}"]},"metadata":{},"sourceType":"module"}